{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/browserconfig.xml","path":"browserconfig.xml","modified":0,"renderable":0},{"_id":"source/favicon-16x16.png","path":"favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/favicon-192x192.png","path":"favicon-192x192.png","modified":0,"renderable":0},{"_id":"source/favicon-32x32.png","path":"favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/mstile-150x150.png","path":"mstile-150x150.png","modified":0,"renderable":0},{"_id":"source/safari-pinned-tab.svg","path":"safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/site.webmanifest","path":"site.webmanifest","modified":0,"renderable":0},{"_id":"source/favicon-384x384.png","path":"favicon-384x384.png","modified":0,"renderable":0},{"_id":"themes/cactus/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/mstile-150x150.png","path":"images/mstile-150x150.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-384x384.png","path":"images/favicon-384x384.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1545722823138},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1545722823138},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1545722823139},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1545722823138},{"_id":"themes/cactus/README.md","hash":"6b0c6ea10c3a68c3788f2c81065bad37699dc6a7","modified":1545722823139},{"_id":"themes/cactus/_config.yml","hash":"fbb7b435f15970e746f46a33a14562eea90cbf1b","modified":1545722823139},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1545722823139},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1545722823155},{"_id":"source/_posts/build-automation.md","hash":"d595206e1375836baf1b135885b2b8292b7a6a55","modified":1545721168698},{"_id":"source/_posts/debugging-is-a-funnel.md","hash":"b0703b1fa92728830519ce8276b8ee91fa69a9f9","modified":1545718380699},{"_id":"source/_posts/do-not-stop-not-thinking-negatively.md","hash":"43d344aeb5b5fc09a90fa6b1637e4935bcef9b27","modified":1545716782391},{"_id":"source/_posts/ease-your-cache.md","hash":"1cc3f585191c64e380e39b4486e015db356fe2d9","modified":1545721227319},{"_id":"source/_posts/effort-is-a-zero-sum-game.md","hash":"4dde89d2eb99b9e0f1cf8c810b356668dd063555","modified":1545718411369},{"_id":"source/_posts/if-it-is-impossible-it-did-not-happen.md","hash":"7ff0f776363141953b258ce5f642983cf3564000","modified":1545718451568},{"_id":"source/_posts/javascript-quizzes.md","hash":"0a9373b0365e2f2ae20b1463cd7e56a7473c1743","modified":1545718411363},{"_id":"source/_posts/named-curies.md","hash":"fc16de4e6b4586fdc5f379ff947d32b2ec3cab57","modified":1545721273338},{"_id":"source/_posts/pass-the-curry.md","hash":"5c16ff1a46992a2b4ec20f5b77f23b4bd2b2c3c3","modified":1545718432094},{"_id":"source/_posts/the-joys-of-toxic-asset-ownership.md","hash":"233654eb54a35316ed906478fd3eb6e82a03a691","modified":1545717051434},{"_id":"source/_posts/try-the-same-thing-again-and-again-sometimes.md","hash":"af0f79ae6ae1cd331e21c7c8c79a83747d9ee3ce","modified":1545718432089},{"_id":"source/about/index-1.md","hash":"8e0217ca6081c8c82900dbf7546588888f9c5749","modified":1545723740281},{"_id":"source/about/index.md","hash":"d72f17025a3137d1b979888041fe491bd5244043","modified":1545723611918},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545722823129},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1545722823131},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545722813275},{"_id":"themes/cactus/.git/index","hash":"895d1d13b3d78a8e6dd845230ad7b94b92653797","modified":1545724733267},{"_id":"themes/cactus/.git/packed-refs","hash":"bea3431f7b90058a5ce306e4ff17d3294d1903d3","modified":1545722823126},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1545722823140},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1545722823141},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1545722823141},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1545722823141},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1545722823142},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1545722823142},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1545722823142},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1545722823143},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1545722823143},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1545722823143},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1545722823144},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1545722823144},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1545722823144},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1545722823151},{"_id":"themes/cactus/layout/index.ejs","hash":"2bb56a08ca4dcd9e37170be04ec791fffce8727a","modified":1545722823152},{"_id":"themes/cactus/layout/layout.ejs","hash":"ad0f48fca26b3670c9fbcb3e61bfbaa62dc33ab2","modified":1545722823153},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1545722823154},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1545722823154},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1545722823156},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1545722823157},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1545722823158},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1545722823158},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1545722813276},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545722813275},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1545722813277},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545722813277},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1545722813278},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1545722813276},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1545722813278},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1545722813276},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1545722813277},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1545722813277},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1545722813279},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1545722813275},{"_id":"themes/cactus/.git/logs/HEAD","hash":"deb22533ea857e15bf1021527577a46359021423","modified":1545722823130},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1545722823145},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1545722823145},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1545722823145},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1545722823146},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1545722823146},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1545722823150},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1545722823150},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1545722823151},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2ff73bd3dbdb58fa69cbadb2a1c0ed966812ce88","modified":1545722823161},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1545722823161},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1545722823181},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1545722823184},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1545722823185},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1545722823185},{"_id":"themes/cactus/source/css/style.styl","hash":"935843090dc40797a1e85181253ffe169b883131","modified":1545722823185},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"a14094fb651e92d7c5f754bd7497bf2457d20637","modified":1545756888000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"ecb9b77472f32b1dfab01bb20ce54d6897953aa4","modified":1545756886000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"06947f51d6e35af3fedd7204ff63f7c1b06fca05","modified":1545756888000},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1545722823189},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1545722823189},{"_id":"themes/cactus/.git/refs/heads/master","hash":"42a73ffd83fd6c2c04589af4980bfba4642aeac7","modified":1545722823130},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1545722823146},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1545722823147},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1545722823147},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1545722823147},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1545722823148},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1545722823148},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1545722823149},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1545722823149},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1545722823160},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1545722823160},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1545722823160},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1545722823160},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1545722823162},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1545722823162},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1545722823162},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1545722823163},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1545722823163},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1545722823163},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1545722823163},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1545722823164},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1545722823164},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1545722823164},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1545722823165},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1545722823165},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1545722823165},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1545722823165},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1545722823166},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1545722823165},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1545722823166},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1545722823167},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1545722823167},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1545722823167},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1545722823168},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1545722823168},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1545722823169},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1545722823169},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1545722823170},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1545722823170},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1545722823171},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1545722823171},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1545722823172},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1545722823172},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1545722823172},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1545722823173},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1545722823173},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1545722823173},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1545722823174},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1545722823174},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1545722823174},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1545722823175},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1545722823176},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1545722823176},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1545722823176},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1545722823176},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1545722823177},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1545722823178},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1545722823178},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1545722823178},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1545722823178},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1545722823178},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1545722823179},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1545722823180},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1545722823181},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1545722823181},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"2c0569b6ba624160701e69688ca02ecdf24c2ac6","modified":1545722823181},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1545722823181},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1545722823181},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1545722823182},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1545722823182},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1545722823182},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1545722823182},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1545722823184},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1545722823184},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1545722823233},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1545722823233},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1545722823236},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1545722823236},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1545722823239},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1545722823239},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1545722823242},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1545722823241},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1545722823244},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1545722823244},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1545722823246},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1545722823247},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1545722823246},{"_id":"themes/cactus/.git/objects/pack/pack-58646187af1da472fa7c2d3adadb602ee6cdab0e.idx","hash":"84ca59ffdcdf9cd6868d50516dd72145bd4d6f51","modified":1545722823112},{"_id":"themes/cactus/source/images/logo.png","hash":"4b759ecc82e0602c993828550c8e26eecc234492","modified":1545724355813},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1545722823209},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1545722823232},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1545722823233},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1545722823234},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1545722823236},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1545722823237},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1545722823238},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1545722823240},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1545722823242},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1545722823241},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1545722823243},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1545722823245},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1545722823245},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"deb22533ea857e15bf1021527577a46359021423","modified":1545722823130},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545722823129},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1545722823183},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1545722823184},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1545722823190},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1545722823198},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1545722823199},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1545722823201},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1545722823201},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1545722823201},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1545722823210},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1545722823208},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1545722823210},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1545722823192},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1545722823198},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1545722823198},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1545722823208},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"deb22533ea857e15bf1021527577a46359021423","modified":1545722823129},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1545722823200},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1545722823202},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1545722823207},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1545722823219},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1545722823224},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1545722823229},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1545722823221},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1545722823226},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1545722823229},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1545722823217},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1545722823222},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1545722823223},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1545722823228},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1545722823227},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1545722823231},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1545722823196},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1545722823206},{"_id":"themes/cactus/.git/objects/pack/pack-58646187af1da472fa7c2d3adadb602ee6cdab0e.pack","hash":"b3b043d0e78b5ee290f715417763d882f95e6a5a","modified":1545722823111},{"_id":"source/tags/index.md","hash":"5f2e0db9ab08d774214e2dca169a6d6551b84a63","modified":1545723878898},{"_id":"public/about/index.html","hash":"c3cf071e856326e6f57974abb4defa589abbe827","modified":1545725959388},{"_id":"public/effort-is-a-zero-sum-game/index.html","hash":"59a7b0072e59987dd96563951efcfe0fc1f7658e","modified":1545725959389},{"_id":"public/debugging-is-a-funnel/index.html","hash":"06bda0e44374072c6bbaaf078c798b03f72584fb","modified":1545725959389},{"_id":"public/named-curies/index.html","hash":"de7c8b7886343a98a0b0ca1cdcbd7821c9212303","modified":1545725959391},{"_id":"public/try-the-same-thing-again-and-again-sometimes/index.html","hash":"6bdbba2bee0b7009b104f9a0715eb3f576d78847","modified":1545725959389},{"_id":"public/if-it-is-impossible-it-did-not-happen/index.html","hash":"530e0b84bd2e373d115bc4aec5888340838a6d2a","modified":1545725959389},{"_id":"public/build-automation/index.html","hash":"382cf4f82c368b2367a3f06926edc0c347d5aa41","modified":1545725959389},{"_id":"public/do-not-stop-not-thinking-negatively/index.html","hash":"620112bb44adce669fb1776c3da7869394f7df30","modified":1545725959389},{"_id":"public/javascript-quizzes/index.html","hash":"e0a7184cf0e7756f8e651b58ec61c71d1290fd41","modified":1545725959389},{"_id":"public/the-joys-of-toxic-asset-ownership/index.html","hash":"bf5c65d46a194144377b1b92fa404f8605dc9d6d","modified":1545725959389},{"_id":"public/archives/index.html","hash":"a95f552023a62c6718cc67e34d2d330b777a43b0","modified":1545725959389},{"_id":"public/archives/page/2/index.html","hash":"44e606e8f06a1b39e3c0c9caf32563b194d3ef68","modified":1545725959390},{"_id":"public/archives/2010/index.html","hash":"7a39fe0933aad9457236bfaff425f9320e7f43fa","modified":1545725959390},{"_id":"public/archives/2010/06/index.html","hash":"1a5cddbf58ed0a0f50c354e0b8ba45bc9f8673c1","modified":1545725959390},{"_id":"public/archives/2012/index.html","hash":"fa7a5d4d0bce71dd01f26a45d1b3af02acaf67a8","modified":1545725959390},{"_id":"public/archives/2012/02/index.html","hash":"12775e5dd7fb069b77cca3134c0549e06b71e8c0","modified":1545725959390},{"_id":"public/archives/2012/11/index.html","hash":"d6f21badaeb3957580d419ee3d5ef4af615f0ff7","modified":1545725959390},{"_id":"public/archives/2013/index.html","hash":"d9e7500bfcb6afa02331a1ccce59b0d7d983a279","modified":1545725959390},{"_id":"public/archives/2013/01/index.html","hash":"00c49dc3750432c6c2c489aceccd0ec7ab4ba6e9","modified":1545725959390},{"_id":"public/archives/2013/08/index.html","hash":"ed3ee7f9d0711bf25a86fe453126e2a465c4f828","modified":1545725959390},{"_id":"public/archives/2013/09/index.html","hash":"1c91797ac4763a95412990f5c3a2acde958594a2","modified":1545725959390},{"_id":"public/archives/2013/12/index.html","hash":"153a3008099e2a6c1d510e0f44e5b90901338fba","modified":1545725959390},{"_id":"public/archives/2015/index.html","hash":"84a77705337757eb96c68738afe07a597d9903fe","modified":1545725959390},{"_id":"public/archives/2015/08/index.html","hash":"823641a0b8530881ad3ac8f50dbb6631c593d6a9","modified":1545725959390},{"_id":"public/archives/2016/index.html","hash":"d7cfa793d1991d506d531b8fb827b15bb275cbd2","modified":1545725959390},{"_id":"public/archives/2016/01/index.html","hash":"a964240f85abccd28550415e8e38ba856e266086","modified":1545725959390},{"_id":"public/index.html","hash":"87bd79f85a941c2c2bc69fbc32ee493942e54021","modified":1545725959390},{"_id":"public/tags/automation/index.html","hash":"4b80bdfabc97a80127289505c66fc50ecdeffc87","modified":1545725959390},{"_id":"public/tags/node/index.html","hash":"7ec4e6d7a82bf3b24a12daf8cd72d0702ef28651","modified":1545725959390},{"_id":"public/tags/grunt/index.html","hash":"aa4f6569eb7c7958e2bf909c24e152eac59d1cb2","modified":1545725959390},{"_id":"public/tags/debugging/index.html","hash":"d70541414d55e0f4bac53e1ed9db290c856b0541","modified":1545725959390},{"_id":"public/tags/logic/index.html","hash":"5365b3c21c74e9c4327d2e73146eb12f51e19a34","modified":1545725959390},{"_id":"public/tags/style/index.html","hash":"1361d3a30b91492d6fa9d5ea800757c518899fb6","modified":1545725959390},{"_id":"public/tags/javascript/index.html","hash":"2fb09205af37dfb1e3c1afc4396b3928d58a0844","modified":1545725959391},{"_id":"public/tags/caching/index.html","hash":"c966e89caaa0931d0a4579992112b0c8c6d67b04","modified":1545725959391},{"_id":"public/tags/work/index.html","hash":"403dff731fd4302c86edf7682ccc3d75ceebeee0","modified":1545725959391},{"_id":"public/tags/effort/index.html","hash":"c7f943d72b3295b4920c9b8b8f169ebd4322ce36","modified":1545725959391},{"_id":"public/tags/quizzes/index.html","hash":"230f83e239ad399577946d91d3264a592e2965f9","modified":1545725959391},{"_id":"public/tags/currying/index.html","hash":"8ac30e83b2147875464f35e485a758530ce16942","modified":1545725959391},{"_id":"public/tags/lambdas/index.html","hash":"d58534586bdff8eeb7568643ac059008259f17d3","modified":1545725959391},{"_id":"public/tags/function-calls/index.html","hash":"3a91c1408fdcfb053c3c67b244b004949f016322","modified":1545725959391},{"_id":"public/tags/function-references/index.html","hash":"6e774e82942692184a7064ac53ecb8d78e6ea4c4","modified":1545725959391},{"_id":"public/tags/economics/index.html","hash":"6a4eda44630bde38e89304eb48af456eef8b9029","modified":1545725959391},{"_id":"public/tags/planet-money/index.html","hash":"6d7b1ad798c9481b8fb002a615476cb5ea9a1903","modified":1545725959391},{"_id":"public/tags/real-estate/index.html","hash":"53e9455ade82dec9023f16197f8c08dbc9e95538","modified":1545725959391},{"_id":"public/tags/toxic-assets/index.html","hash":"b015cbf2c7f28fd66f154af10efe75ca07f84568","modified":1545725959391},{"_id":"public/tags/development/index.html","hash":"5d9fabeeeb41cd49251b845bb164f8115b7d5e35","modified":1545725959391},{"_id":"public/tags/life/index.html","hash":"cfbbae8a4e701e6f2b5d7f016cd5a07ce5b0e0b8","modified":1545725959391},{"_id":"public/pass-the-curry/index.html","hash":"e6b4d1edbaa1ece23efcf81f3fae8cf7318e65bb","modified":1545725959391},{"_id":"public/ease-your-cache/index.html","hash":"e77d082263d8ccc5e8aecd4b6edcbf0aa509b578","modified":1545725959391},{"_id":"public/tags/index.html","hash":"52678385ffa4897be450c25024e0b04006a55dce","modified":1545725959388},{"_id":"source/apple-touch-icon.png","hash":"a14094fb651e92d7c5f754bd7497bf2457d20637","modified":1545756888000},{"_id":"source/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1545756888000},{"_id":"source/favicon-16x16.png","hash":"d87e72d33934f48d831e5ef4c88656f07bee833c","modified":1545756888000},{"_id":"source/favicon-192x192.png","hash":"ecb9b77472f32b1dfab01bb20ce54d6897953aa4","modified":1545756886000},{"_id":"source/favicon-32x32.png","hash":"27959a1cb5ca03fff8cff67e5dc6050339c00d13","modified":1545756888000},{"_id":"source/favicon.ico","hash":"06947f51d6e35af3fedd7204ff63f7c1b06fca05","modified":1545756888000},{"_id":"source/mstile-150x150.png","hash":"e7a7d27e391768b635f525c3c0f154bc52e44c2e","modified":1545756888000},{"_id":"source/safari-pinned-tab.svg","hash":"320ba9d5230becc2eea398ac4f33f56f57c3fdae","modified":1545756888000},{"_id":"source/site.webmanifest","hash":"e1723dd9813b4f2df2da91f834ff644578649cc1","modified":1545756888000},{"_id":"source/favicon-384x384.png","hash":"edbd4fe6f6317eb40c62f4503ce60a279694dc55","modified":1545756886000},{"_id":"themes/cactus/source/images/favicon-16x16.png","hash":"d87e72d33934f48d831e5ef4c88656f07bee833c","modified":1545756888000},{"_id":"themes/cactus/source/images/favicon-32x32.png","hash":"27959a1cb5ca03fff8cff67e5dc6050339c00d13","modified":1545756888000},{"_id":"themes/cactus/source/images/mstile-150x150.png","hash":"e7a7d27e391768b635f525c3c0f154bc52e44c2e","modified":1545756888000},{"_id":"themes/cactus/source/images/safari-pinned-tab.svg","hash":"320ba9d5230becc2eea398ac4f33f56f57c3fdae","modified":1545756888000},{"_id":"themes/cactus/.git/objects/3e/381b499d6702707c1794703bb7473b288e3a9b","hash":"90a5b067b2506f048fca91d4382fed90d0faddd3","modified":1545724630948},{"_id":"themes/cactus/.git/objects/4e/44b04ec9f6e61254d0ed69e578c45b855f80e1","hash":"a9dce00b95cde1a06f150a23fb69148f21359b14","modified":1545724630966},{"_id":"themes/cactus/.git/objects/4b/46edaa7ec38f86cf2b5b59a457b04b39683a4d","hash":"3a8e5fdbe153a2ede20bbfb44512f817664cd5ba","modified":1545724630947},{"_id":"themes/cactus/.git/objects/55/b8c677c2e0bc3577cb49faa1554b88304e8d0e","hash":"56b98641d3beba9207878bd33e919f7e4de942b3","modified":1545724630965},{"_id":"themes/cactus/.git/objects/ac/6408e9c55e80d6fda712c8615841c0c0fe70eb","hash":"1193d5e41b2ddb9b4b9ac5521864986f71ea2afb","modified":1545724630963},{"_id":"themes/cactus/.git/objects/5f/7aeee113f5ca951621d119f0aa5589e8d7046a","hash":"df425c0d68de18f20944f5e712ebfff2b3fa2661","modified":1545724630951},{"_id":"themes/cactus/.git/objects/ae/545d4f57353faca8fc6ca40053d722f8a8bed6","hash":"6517e1240a5da67fc90ca7a008c72691f4746cd3","modified":1545724630950},{"_id":"themes/cactus/source/images/favicon-384x384.png","hash":"edbd4fe6f6317eb40c62f4503ce60a279694dc55","modified":1545756886000},{"_id":"themes/cactus/.git/objects/01/77609eafda19c4f0b6264d3ed1fdb89c9cf937","hash":"e1e0b534441fe17c1e27c7a112880e8e63ac4535","modified":1545724630961},{"_id":"public/images/apple-touch-icon.png","hash":"a14094fb651e92d7c5f754bd7497bf2457d20637","modified":1545724672441},{"_id":"public/images/favicon-192x192.png","hash":"ecb9b77472f32b1dfab01bb20ce54d6897953aa4","modified":1545724672441},{"_id":"public/images/favicon.ico","hash":"06947f51d6e35af3fedd7204ff63f7c1b06fca05","modified":1545724672442},{"_id":"public/apple-touch-icon.png","hash":"a14094fb651e92d7c5f754bd7497bf2457d20637","modified":1545724672442},{"_id":"public/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1545724672442},{"_id":"public/favicon-16x16.png","hash":"d87e72d33934f48d831e5ef4c88656f07bee833c","modified":1545724672442},{"_id":"public/favicon-32x32.png","hash":"27959a1cb5ca03fff8cff67e5dc6050339c00d13","modified":1545724672442},{"_id":"public/favicon.ico","hash":"06947f51d6e35af3fedd7204ff63f7c1b06fca05","modified":1545724672442},{"_id":"public/favicon-192x192.png","hash":"ecb9b77472f32b1dfab01bb20ce54d6897953aa4","modified":1545724672442},{"_id":"public/mstile-150x150.png","hash":"e7a7d27e391768b635f525c3c0f154bc52e44c2e","modified":1545724672442},{"_id":"public/safari-pinned-tab.svg","hash":"320ba9d5230becc2eea398ac4f33f56f57c3fdae","modified":1545724672442},{"_id":"public/site.webmanifest","hash":"e1723dd9813b4f2df2da91f834ff644578649cc1","modified":1545724672442},{"_id":"public/images/favicon-16x16.png","hash":"d87e72d33934f48d831e5ef4c88656f07bee833c","modified":1545724672442},{"_id":"public/images/favicon-32x32.png","hash":"27959a1cb5ca03fff8cff67e5dc6050339c00d13","modified":1545724672442},{"_id":"public/images/safari-pinned-tab.svg","hash":"320ba9d5230becc2eea398ac4f33f56f57c3fdae","modified":1545724672442},{"_id":"public/images/mstile-150x150.png","hash":"e7a7d27e391768b635f525c3c0f154bc52e44c2e","modified":1545724672443},{"_id":"public/favicon-384x384.png","hash":"edbd4fe6f6317eb40c62f4503ce60a279694dc55","modified":1545724672444},{"_id":"public/images/favicon-384x384.png","hash":"edbd4fe6f6317eb40c62f4503ce60a279694dc55","modified":1545724672444},{"_id":"themes/cactus/.git/objects/de/176976d0c0b7cf1f34032e8b15cb6c7fbfa308","hash":"d65cd4b4095614fbe6c31e95f9f89b924036c9f7","modified":1545724732944},{"_id":"public/images/logo.png","hash":"4b759ecc82e0602c993828550c8e26eecc234492","modified":1545724749012}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2018-12-25T07:39:25.000Z","_content":"\nPeter Ajtai is the Solutions Architect at [SolidDigital](https://www.soliddigital.com/).\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-12-24 23:39:25\n---\n\nPeter Ajtai is the Solutions Architect at [SolidDigital](https://www.soliddigital.com/).\n","updated":"2018-12-25T07:40:11.918Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjq3g0kv40003ibyqhyu0yj5q","content":"<p>Peter Ajtai is the Solutions Architect at <a href=\"https://www.soliddigital.com/\" target=\"_blank\" rel=\"noopener\">SolidDigital</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Peter Ajtai is the Solutions Architect at <a href=\"https://www.soliddigital.com/\" target=\"_blank\" rel=\"noopener\">SolidDigital</a>.</p>\n"},{"title":"Tags","date":"2018-12-25T07:43:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-12-24 23:43:52\ntype: tags\n---\n","updated":"2018-12-25T07:44:38.898Z","path":"tags/index.html","_id":"cjq3g26mp001xibyqncjwj84j","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Build automation","date":"2013-01-18T08:00:00.000Z","status":"publish","type":"post","_content":"I just gave an internal talk on build automation.\n\nThe slides are [**here**](http://pajtai.github.com/buildAutomation/#/). It's amazing how much a few automated build tasks can ease one's mind. An iframe is below, so\nthe css isn't as responsive as if you follow the link.\n\n<iframe src=\"http://pajtai.github.com/buildAutomation/#/\" width=\"800px\" height=\"800px\"></iframe>\n","source":"_posts/build-automation.md","raw":"---\ntitle: Build automation\ndate: 2013-01-18\ntags:\n- automation\n- node\n- grunt\nstatus: publish\ntype: post\n---\nI just gave an internal talk on build automation.\n\nThe slides are [**here**](http://pajtai.github.com/buildAutomation/#/). It's amazing how much a few automated build tasks can ease one's mind. An iframe is below, so\nthe css isn't as responsive as if you follow the link.\n\n<iframe src=\"http://pajtai.github.com/buildAutomation/#/\" width=\"800px\" height=\"800px\"></iframe>\n","slug":"build-automation","published":1,"updated":"2018-12-25T06:59:28.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kuy0000ibyqpf9k7n1o","content":"<p>I just gave an internal talk on build automation.</p>\n<p>The slides are <a href=\"http://pajtai.github.com/buildAutomation/#/\" target=\"_blank\" rel=\"noopener\"><strong>here</strong></a>. It’s amazing how much a few automated build tasks can ease one’s mind. An iframe is below, so<br>the css isn’t as responsive as if you follow the link.</p>\n<iframe src=\"http://pajtai.github.com/buildAutomation/#/\" width=\"800px\" height=\"800px\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<p>I just gave an internal talk on build automation.</p>\n<p>The slides are <a href=\"http://pajtai.github.com/buildAutomation/#/\" target=\"_blank\" rel=\"noopener\"><strong>here</strong></a>. It’s amazing how much a few automated build tasks can ease one’s mind. An iframe is below, so<br>the css isn’t as responsive as if you follow the link.</p>\n<iframe src=\"http://pajtai.github.com/buildAutomation/#/\" width=\"800px\" height=\"800px\"></iframe>\n"},{"title":"Debugging is a funnel","date":"2015-08-14T07:00:00.000Z","_content":"\nMost bugs are created by one line of code... many by one character. Debugging is\nthe funnel that starts with your application - sometimes your server / os / or\ndevice - and leads you to that one root cause.\n\nWhenever I end up feeling that I spent too much time trying to isolate a bug,\nas I think back on things, it's always because I wasn't constantly narrowing\ndown where the bug could be coming from.\n\nThinking of debugging as a funnel can make some difficult bugs seem easy to\nsolve. For example a colleague, Greg, was writing a VOD (video on demand) app\nfor Smart TVs. The code worked - showed a browsing page - on the browser, but\nloaded on to the TV, the app would crash before showing the screen.\n\nGreg had narrowed the problem down to one of context. `this.private` was not\navailable on the TV, but it was available on the browser.\n\nIn this case, it seemed like the context should be available. The method was\nbeing called directly - `focusFinder.configure()`, and within the `configure`\nmethod, `this.private` was being referenced. It was there on the browser, but\nmissing on the TV.\n\nLogging out (this TV has no debugger) `this.private` on the TV showed that it\nwas `undefined`. Maybe `this` was not the right object? Logging out\n`Object.keys(focusFinder)` logged out all the correct keys except for the one\nwe wanted. So the question became: what was different about our key? It was\ncalled `private` and it was the only key whose value was an object and not a\nfunction. Changing the name of the key to `internal` made the app start and is\nprobably a better if equally broad name. Private is a future reserved keyword\n(not yet used for anything but reserved anyway) in JavaScript using strict mode.\nThe browser and the TV had different implementations for how to handle the\nsituation.\n\nI feel like the trick here was just getting a handle on the fact that the\ncorrect object was being dealt with but the desired key value pair was missing\nfrom it. It is often tempting to jump to conclusions, and having the incorrect\ncontext is often your first thought when working with JavaScript. The second\ntrick was realizing that changing the name of the key might accomplish anything.\nThat is Occam's razor at work.\n\nIt can be tempting to jump to conclusions, but since debugging is very similar\nto binomial search, and false conclusions can lead you into thousands of lines\nof code that have nothing to do with your bug.\n\nIn fact binomial search can be an efficient way to find the cause of a probelm\nif for code that worked in the past but no longer does. `git bisect` is a great\ntool for these type of problems.\n\nSometimes you have to \"bisect\" the code you are working on. For example Cooper\nwas working on figuring out why an LG TV app was running so slow. He had\neliminated many potential causes relating to the running of the code. Finally\nhe decided to just delete the majority of the elements on the page. The app sped\nup. At this point it's a binomial search in the dom, and the culprit turned out\nto be an audio tag. Including it in the page slowed down the app.\n\nOften bugs create errors, and the ability to inspect these errors either speeds\nup or makes fixing the bug possible. This is why it's so important to know the\nlocation of log files and config files for parts of you system... or to have\nsome mechanism in place to monitor logging output. For node apps that have good\nlogging, `pm2 log` is often enough.\n\nOf course if your error is not being logged, things become much more difficult.\n\n","source":"_posts/debugging-is-a-funnel.md","raw":"---\ntitle: Debugging is a funnel\ndate: 2015-08-14\ntags:\n- debugging\n---\n\nMost bugs are created by one line of code... many by one character. Debugging is\nthe funnel that starts with your application - sometimes your server / os / or\ndevice - and leads you to that one root cause.\n\nWhenever I end up feeling that I spent too much time trying to isolate a bug,\nas I think back on things, it's always because I wasn't constantly narrowing\ndown where the bug could be coming from.\n\nThinking of debugging as a funnel can make some difficult bugs seem easy to\nsolve. For example a colleague, Greg, was writing a VOD (video on demand) app\nfor Smart TVs. The code worked - showed a browsing page - on the browser, but\nloaded on to the TV, the app would crash before showing the screen.\n\nGreg had narrowed the problem down to one of context. `this.private` was not\navailable on the TV, but it was available on the browser.\n\nIn this case, it seemed like the context should be available. The method was\nbeing called directly - `focusFinder.configure()`, and within the `configure`\nmethod, `this.private` was being referenced. It was there on the browser, but\nmissing on the TV.\n\nLogging out (this TV has no debugger) `this.private` on the TV showed that it\nwas `undefined`. Maybe `this` was not the right object? Logging out\n`Object.keys(focusFinder)` logged out all the correct keys except for the one\nwe wanted. So the question became: what was different about our key? It was\ncalled `private` and it was the only key whose value was an object and not a\nfunction. Changing the name of the key to `internal` made the app start and is\nprobably a better if equally broad name. Private is a future reserved keyword\n(not yet used for anything but reserved anyway) in JavaScript using strict mode.\nThe browser and the TV had different implementations for how to handle the\nsituation.\n\nI feel like the trick here was just getting a handle on the fact that the\ncorrect object was being dealt with but the desired key value pair was missing\nfrom it. It is often tempting to jump to conclusions, and having the incorrect\ncontext is often your first thought when working with JavaScript. The second\ntrick was realizing that changing the name of the key might accomplish anything.\nThat is Occam's razor at work.\n\nIt can be tempting to jump to conclusions, but since debugging is very similar\nto binomial search, and false conclusions can lead you into thousands of lines\nof code that have nothing to do with your bug.\n\nIn fact binomial search can be an efficient way to find the cause of a probelm\nif for code that worked in the past but no longer does. `git bisect` is a great\ntool for these type of problems.\n\nSometimes you have to \"bisect\" the code you are working on. For example Cooper\nwas working on figuring out why an LG TV app was running so slow. He had\neliminated many potential causes relating to the running of the code. Finally\nhe decided to just delete the majority of the elements on the page. The app sped\nup. At this point it's a binomial search in the dom, and the culprit turned out\nto be an audio tag. Including it in the page slowed down the app.\n\nOften bugs create errors, and the ability to inspect these errors either speeds\nup or makes fixing the bug possible. This is why it's so important to know the\nlocation of log files and config files for parts of you system... or to have\nsome mechanism in place to monitor logging output. For node apps that have good\nlogging, `pm2 log` is often enough.\n\nOf course if your error is not being logged, things become much more difficult.\n\n","slug":"debugging-is-a-funnel","published":1,"updated":"2018-12-25T06:13:00.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kv30002ibyquy5c5jfl","content":"<p>Most bugs are created by one line of code… many by one character. Debugging is<br>the funnel that starts with your application - sometimes your server / os / or<br>device - and leads you to that one root cause.</p>\n<p>Whenever I end up feeling that I spent too much time trying to isolate a bug,<br>as I think back on things, it’s always because I wasn’t constantly narrowing<br>down where the bug could be coming from.</p>\n<p>Thinking of debugging as a funnel can make some difficult bugs seem easy to<br>solve. For example a colleague, Greg, was writing a VOD (video on demand) app<br>for Smart TVs. The code worked - showed a browsing page - on the browser, but<br>loaded on to the TV, the app would crash before showing the screen.</p>\n<p>Greg had narrowed the problem down to one of context. <code>this.private</code> was not<br>available on the TV, but it was available on the browser.</p>\n<p>In this case, it seemed like the context should be available. The method was<br>being called directly - <code>focusFinder.configure()</code>, and within the <code>configure</code><br>method, <code>this.private</code> was being referenced. It was there on the browser, but<br>missing on the TV.</p>\n<p>Logging out (this TV has no debugger) <code>this.private</code> on the TV showed that it<br>was <code>undefined</code>. Maybe <code>this</code> was not the right object? Logging out<br><code>Object.keys(focusFinder)</code> logged out all the correct keys except for the one<br>we wanted. So the question became: what was different about our key? It was<br>called <code>private</code> and it was the only key whose value was an object and not a<br>function. Changing the name of the key to <code>internal</code> made the app start and is<br>probably a better if equally broad name. Private is a future reserved keyword<br>(not yet used for anything but reserved anyway) in JavaScript using strict mode.<br>The browser and the TV had different implementations for how to handle the<br>situation.</p>\n<p>I feel like the trick here was just getting a handle on the fact that the<br>correct object was being dealt with but the desired key value pair was missing<br>from it. It is often tempting to jump to conclusions, and having the incorrect<br>context is often your first thought when working with JavaScript. The second<br>trick was realizing that changing the name of the key might accomplish anything.<br>That is Occam’s razor at work.</p>\n<p>It can be tempting to jump to conclusions, but since debugging is very similar<br>to binomial search, and false conclusions can lead you into thousands of lines<br>of code that have nothing to do with your bug.</p>\n<p>In fact binomial search can be an efficient way to find the cause of a probelm<br>if for code that worked in the past but no longer does. <code>git bisect</code> is a great<br>tool for these type of problems.</p>\n<p>Sometimes you have to “bisect” the code you are working on. For example Cooper<br>was working on figuring out why an LG TV app was running so slow. He had<br>eliminated many potential causes relating to the running of the code. Finally<br>he decided to just delete the majority of the elements on the page. The app sped<br>up. At this point it’s a binomial search in the dom, and the culprit turned out<br>to be an audio tag. Including it in the page slowed down the app.</p>\n<p>Often bugs create errors, and the ability to inspect these errors either speeds<br>up or makes fixing the bug possible. This is why it’s so important to know the<br>location of log files and config files for parts of you system… or to have<br>some mechanism in place to monitor logging output. For node apps that have good<br>logging, <code>pm2 log</code> is often enough.</p>\n<p>Of course if your error is not being logged, things become much more difficult.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Most bugs are created by one line of code… many by one character. Debugging is<br>the funnel that starts with your application - sometimes your server / os / or<br>device - and leads you to that one root cause.</p>\n<p>Whenever I end up feeling that I spent too much time trying to isolate a bug,<br>as I think back on things, it’s always because I wasn’t constantly narrowing<br>down where the bug could be coming from.</p>\n<p>Thinking of debugging as a funnel can make some difficult bugs seem easy to<br>solve. For example a colleague, Greg, was writing a VOD (video on demand) app<br>for Smart TVs. The code worked - showed a browsing page - on the browser, but<br>loaded on to the TV, the app would crash before showing the screen.</p>\n<p>Greg had narrowed the problem down to one of context. <code>this.private</code> was not<br>available on the TV, but it was available on the browser.</p>\n<p>In this case, it seemed like the context should be available. The method was<br>being called directly - <code>focusFinder.configure()</code>, and within the <code>configure</code><br>method, <code>this.private</code> was being referenced. It was there on the browser, but<br>missing on the TV.</p>\n<p>Logging out (this TV has no debugger) <code>this.private</code> on the TV showed that it<br>was <code>undefined</code>. Maybe <code>this</code> was not the right object? Logging out<br><code>Object.keys(focusFinder)</code> logged out all the correct keys except for the one<br>we wanted. So the question became: what was different about our key? It was<br>called <code>private</code> and it was the only key whose value was an object and not a<br>function. Changing the name of the key to <code>internal</code> made the app start and is<br>probably a better if equally broad name. Private is a future reserved keyword<br>(not yet used for anything but reserved anyway) in JavaScript using strict mode.<br>The browser and the TV had different implementations for how to handle the<br>situation.</p>\n<p>I feel like the trick here was just getting a handle on the fact that the<br>correct object was being dealt with but the desired key value pair was missing<br>from it. It is often tempting to jump to conclusions, and having the incorrect<br>context is often your first thought when working with JavaScript. The second<br>trick was realizing that changing the name of the key might accomplish anything.<br>That is Occam’s razor at work.</p>\n<p>It can be tempting to jump to conclusions, but since debugging is very similar<br>to binomial search, and false conclusions can lead you into thousands of lines<br>of code that have nothing to do with your bug.</p>\n<p>In fact binomial search can be an efficient way to find the cause of a probelm<br>if for code that worked in the past but no longer does. <code>git bisect</code> is a great<br>tool for these type of problems.</p>\n<p>Sometimes you have to “bisect” the code you are working on. For example Cooper<br>was working on figuring out why an LG TV app was running so slow. He had<br>eliminated many potential causes relating to the running of the code. Finally<br>he decided to just delete the majority of the elements on the page. The app sped<br>up. At this point it’s a binomial search in the dom, and the culprit turned out<br>to be an audio tag. Including it in the page slowed down the app.</p>\n<p>Often bugs create errors, and the ability to inspect these errors either speeds<br>up or makes fixing the bug possible. This is why it’s so important to know the<br>location of log files and config files for parts of you system… or to have<br>some mechanism in place to monitor logging output. For node apps that have good<br>logging, <code>pm2 log</code> is often enough.</p>\n<p>Of course if your error is not being logged, things become much more difficult.</p>\n"},{"title":"Do not stop not thinking negatively","date":"2012-11-23T08:00:00.000Z","_content":"\nHave you ever run across a variable called something like `undisable`? It takes some mental lifting to turn it into\n`enable`. The conversion from something into its negation is almost like removing a layer of abstraction.\n\nWith this in mind, it's usually clearer to write `if something` than it is to write `if not something`. Of course, there\nare times you don't have a choice - you have to use `not`. But the other day I ran across a case where I didn't\nimmediately realize I had a choice. I caught myself staring at something like:\n\n```javascript\nif ( ! previouslyCached || ! linked ) {\n    methodA();\n} else {\n    methodB();\n}\n```\n\nI was looking at this piece of code because a path was dropping into the wrong fork. The two `not`s do not help, and in\nthis case, the `or` gets in the way too.\n\nIs this clearer?\n\n```javascript\nif ( previouslyCached && linked ) {\n    methodB();\n} else {\n    methodA();\n}\n```\n\nThe two code snippets above are logically equivalent. They accomplish the same thing, but I think the second one is much\neasier to read.\n\nRemoving the `not`s makes it clearer, and in this case, switching to `and` makes it clearer. There are\nfour cases we are concerned with: one of the variables is true while the other is false (2 possibilities for this one),\nboth are true, or both are false. With the first `if`, the `or` is capturing three of these possibilities, with the\nsecond snippet - the `and` - we are only capturing one. In this case specificity means clarity. It's easier to imagine\nboth `previouslyCached` and `linked` being true then it is to imagine the either one or both of the opposites of\n`previouslyCached` or `linked` being true. The `else` acts as a natural \"catch all\" in the second snippet, while it acts\nas a strangely specific and narrow filter in the second one.\n\n\n","source":"_posts/do-not-stop-not-thinking-negatively.md","raw":"---\ntitle: Do not stop not thinking negatively\ndate: 2012-11-23\ntags:\n- logic\n- style\n---\n\nHave you ever run across a variable called something like `undisable`? It takes some mental lifting to turn it into\n`enable`. The conversion from something into its negation is almost like removing a layer of abstraction.\n\nWith this in mind, it's usually clearer to write `if something` than it is to write `if not something`. Of course, there\nare times you don't have a choice - you have to use `not`. But the other day I ran across a case where I didn't\nimmediately realize I had a choice. I caught myself staring at something like:\n\n```javascript\nif ( ! previouslyCached || ! linked ) {\n    methodA();\n} else {\n    methodB();\n}\n```\n\nI was looking at this piece of code because a path was dropping into the wrong fork. The two `not`s do not help, and in\nthis case, the `or` gets in the way too.\n\nIs this clearer?\n\n```javascript\nif ( previouslyCached && linked ) {\n    methodB();\n} else {\n    methodA();\n}\n```\n\nThe two code snippets above are logically equivalent. They accomplish the same thing, but I think the second one is much\neasier to read.\n\nRemoving the `not`s makes it clearer, and in this case, switching to `and` makes it clearer. There are\nfour cases we are concerned with: one of the variables is true while the other is false (2 possibilities for this one),\nboth are true, or both are false. With the first `if`, the `or` is capturing three of these possibilities, with the\nsecond snippet - the `and` - we are only capturing one. In this case specificity means clarity. It's easier to imagine\nboth `previouslyCached` and `linked` being true then it is to imagine the either one or both of the opposites of\n`previouslyCached` or `linked` being true. The `else` acts as a natural \"catch all\" in the second snippet, while it acts\nas a strangely specific and narrow filter in the second one.\n\n\n","slug":"do-not-stop-not-thinking-negatively","published":1,"updated":"2018-12-25T05:46:22.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kv60005ibyqx0fkf3ho","content":"<p>Have you ever run across a variable called something like <code>undisable</code>? It takes some mental lifting to turn it into<br><code>enable</code>. The conversion from something into its negation is almost like removing a layer of abstraction.</p>\n<p>With this in mind, it’s usually clearer to write <code>if something</code> than it is to write <code>if not something</code>. Of course, there<br>are times you don’t have a choice - you have to use <code>not</code>. But the other day I ran across a case where I didn’t<br>immediately realize I had a choice. I caught myself staring at something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( ! previouslyCached || ! linked ) &#123;</span><br><span class=\"line\">    methodA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    methodB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I was looking at this piece of code because a path was dropping into the wrong fork. The two <code>not</code>s do not help, and in<br>this case, the <code>or</code> gets in the way too.</p>\n<p>Is this clearer?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( previouslyCached &amp;&amp; linked ) &#123;</span><br><span class=\"line\">    methodB();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    methodA();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The two code snippets above are logically equivalent. They accomplish the same thing, but I think the second one is much<br>easier to read.</p>\n<p>Removing the <code>not</code>s makes it clearer, and in this case, switching to <code>and</code> makes it clearer. There are<br>four cases we are concerned with: one of the variables is true while the other is false (2 possibilities for this one),<br>both are true, or both are false. With the first <code>if</code>, the <code>or</code> is capturing three of these possibilities, with the<br>second snippet - the <code>and</code> - we are only capturing one. In this case specificity means clarity. It’s easier to imagine<br>both <code>previouslyCached</code> and <code>linked</code> being true then it is to imagine the either one or both of the opposites of<br><code>previouslyCached</code> or <code>linked</code> being true. The <code>else</code> acts as a natural “catch all” in the second snippet, while it acts<br>as a strangely specific and narrow filter in the second one.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Have you ever run across a variable called something like <code>undisable</code>? It takes some mental lifting to turn it into<br><code>enable</code>. The conversion from something into its negation is almost like removing a layer of abstraction.</p>\n<p>With this in mind, it’s usually clearer to write <code>if something</code> than it is to write <code>if not something</code>. Of course, there<br>are times you don’t have a choice - you have to use <code>not</code>. But the other day I ran across a case where I didn’t<br>immediately realize I had a choice. I caught myself staring at something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( ! previouslyCached || ! linked ) &#123;</span><br><span class=\"line\">    methodA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    methodB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I was looking at this piece of code because a path was dropping into the wrong fork. The two <code>not</code>s do not help, and in<br>this case, the <code>or</code> gets in the way too.</p>\n<p>Is this clearer?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( previouslyCached &amp;&amp; linked ) &#123;</span><br><span class=\"line\">    methodB();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    methodA();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The two code snippets above are logically equivalent. They accomplish the same thing, but I think the second one is much<br>easier to read.</p>\n<p>Removing the <code>not</code>s makes it clearer, and in this case, switching to <code>and</code> makes it clearer. There are<br>four cases we are concerned with: one of the variables is true while the other is false (2 possibilities for this one),<br>both are true, or both are false. With the first <code>if</code>, the <code>or</code> is capturing three of these possibilities, with the<br>second snippet - the <code>and</code> - we are only capturing one. In this case specificity means clarity. It’s easier to imagine<br>both <code>previouslyCached</code> and <code>linked</code> being true then it is to imagine the either one or both of the opposites of<br><code>previouslyCached</code> or <code>linked</code> being true. The <code>else</code> acts as a natural “catch all” in the second snippet, while it acts<br>as a strangely specific and narrow filter in the second one.</p>\n"},{"title":"Ease your cache","date":"2013-01-13T08:00:00.000Z","status":"publish","type":"post","_content":"## Easing: 4 sentence intro\n\nEasing is how an animation moves from initial state to completion over time. Easing is described by an equation or set of\nequations. Using easing will make your animation look more polished and appealing.\n\n[Here](http://easings.net/) are visualization for several easing equations.\n\n## Caching\n\nEasing functions can get pretty complicated. They often include notoriously slow methods like sine or cosine. This\nmeans that you should cache your easing results.\n\nThe problem is that if your easing equations are not normalized to one unit of time and one unit of completion, then\nthis caching will not be useful.\n\nIn other words, pass in only a normalized `t`, so that you have the maximum chance of hitting a cached `y`. Basically,\nwe're drawing a curve, and once we calculate a point on that curve, we want to cache our calculation. If we don't\nnormalize our easing equation then we must draw many curves, but if we do normalize then we only need one curve, and\nso we can store points on that single curve from all our animations that share the same easing function.\n\nBelow is an example for easing in and out with a sine function:\n\n```javascript\neaseInOutSine = (function () {\n\n    // Our cache in a closure\n    var cache = {};\n\n    // The actual easing function returned to the user\n    return function(t) {\n\n    // If the value is not in the cache, put it in the cache\n    if (! cache[t]) {\n       cache[t] = -1/2 * (Math.cos(Math.PI * t) - 1);\n    }\n\n    // We return from the cache, knowing our value is there\n    return cache[t];\n    };\n}());\n```\n\n[**jsFiddle using the above**](http://jsfiddle.net/pajtai/VX5xK/show/) - ([code](http://jsfiddle.net/pajtai/VX5xK/))\n\nOr, if you are an [underscore](http://underscorejs.org/) fan:\n\n```javascript\n// Use underscores built in memoize for caching\neaseInOutSine: _.memoize(function(t) {\n\n    return -1/2 * (Math.cos(Math.PI*t) - 1)\n})\n```\n\n[**jsFiddle using the above**](http://jsfiddle.net/pajtai/8kU85/show/) - ([code](http://jsfiddle.net/pajtai/8kU85/))\n\nThis complicates your animation equation, since you have to normalize your time and change intervals, but the\npayoff is a smoother animation, since you're doing fewer computations.\n\nThe above is better for caching then for example something like:\n\n```javascript\n// This is hard to cache, since there's going to be cache entries for each combination of arguments\neaseInOutSine: function (startValue, changeInValue, msElapsed, msDuration) {\n    return -changeInValue/2 * (Math.cos(Math.PI * msElapsed/msDuration) - 1) + startValue;\n},\n```\n\nNormalizing your easing equations to improve caching is fine and dandy, but it certainly isn't very user friendly unless\nyour easing equation or animation engine handles the normalization. Then you can go back to having nice arguments.\n\nThe disadvantage of rolling your normalization into your easing equation is that you have to recalculate the change\nin value from the start and end value at each tick. Also, it doesn't seem like normalization is a job for an easing\n equation. So, let's put the normalization into the animation engine.\n\nFor example, adding normalization to `easeInOutSine` and moving a box around would make something like:\n\n```javascript\n// The animation equation with user friendly arguments\n// This will take care of normalization before calling the easing equation,\n// * tickHook - function that get called on each tick with the updated number\n// * startNum - initial value\n// * endNum - final value\n// * duration - how long animation last in milliseconds\n// * callback - (optional) function to call when animation finishes\n// * easingEq - (optional) easing equation\n    var animate = function (tickHook, startNum, endNum, duration, callback, easingEq) {\n\n        var easingEq = easingEq || easing.easeInOutSine,\n            changeInNum = endNum - startNum,\n            startTime = new Date().getTime(),\n\n            // The engine that runs the animation\n            engine = function () {\n                var now = new Date().getTime(),\n\n                    // Calculate the normalized time elapsed for the easing function\n                    timeNorm = (now - startTime) / duration,\n\n                    // Calculate the normalized completion from the normalized time\n                    // using the easing function\n                    completionNorm = easingEq(timeNorm),\n\n                    // \"un-normalize\" to calculate the new actual number\n                    newNum = startNum + completionNorm * changeInNum;\n\n                if (now - startTime > duration) {\n\n                    if (callback) {\n                        callback();\n                    }\n                } else {\n\n                    // Update interested parties with the new number once per tick\n                    tickHook(newNum);\n\n                    // Kick off the next tick\n                    requestAnimationFrame(engine);\n                }\n            };\n\n        requestAnimationFrame(engine);\n    },\n// and the implentation goes here...\n```\n\n[**jsFiddle example**](http://jsfiddle.net/pajtai/gAAp2/show) ([code](http://jsfiddle.net/pajtai/gAAp2/))\n\nIn fact the caching could probably move out of the easing equation too in order to keep the equation clean. You can\nroll your own caching (a.k.a. memoization) function, or you can use something like [**Underscore's memoize**](http://underscorejs.org/#memoize).\n","source":"_posts/ease-your-cache.md","raw":"---\ntitle: Ease your cache\ndate: 2013-01-13\ntags:\n- javascript\n- caching\nstatus: publish\ntype: post\n---\n## Easing: 4 sentence intro\n\nEasing is how an animation moves from initial state to completion over time. Easing is described by an equation or set of\nequations. Using easing will make your animation look more polished and appealing.\n\n[Here](http://easings.net/) are visualization for several easing equations.\n\n## Caching\n\nEasing functions can get pretty complicated. They often include notoriously slow methods like sine or cosine. This\nmeans that you should cache your easing results.\n\nThe problem is that if your easing equations are not normalized to one unit of time and one unit of completion, then\nthis caching will not be useful.\n\nIn other words, pass in only a normalized `t`, so that you have the maximum chance of hitting a cached `y`. Basically,\nwe're drawing a curve, and once we calculate a point on that curve, we want to cache our calculation. If we don't\nnormalize our easing equation then we must draw many curves, but if we do normalize then we only need one curve, and\nso we can store points on that single curve from all our animations that share the same easing function.\n\nBelow is an example for easing in and out with a sine function:\n\n```javascript\neaseInOutSine = (function () {\n\n    // Our cache in a closure\n    var cache = {};\n\n    // The actual easing function returned to the user\n    return function(t) {\n\n    // If the value is not in the cache, put it in the cache\n    if (! cache[t]) {\n       cache[t] = -1/2 * (Math.cos(Math.PI * t) - 1);\n    }\n\n    // We return from the cache, knowing our value is there\n    return cache[t];\n    };\n}());\n```\n\n[**jsFiddle using the above**](http://jsfiddle.net/pajtai/VX5xK/show/) - ([code](http://jsfiddle.net/pajtai/VX5xK/))\n\nOr, if you are an [underscore](http://underscorejs.org/) fan:\n\n```javascript\n// Use underscores built in memoize for caching\neaseInOutSine: _.memoize(function(t) {\n\n    return -1/2 * (Math.cos(Math.PI*t) - 1)\n})\n```\n\n[**jsFiddle using the above**](http://jsfiddle.net/pajtai/8kU85/show/) - ([code](http://jsfiddle.net/pajtai/8kU85/))\n\nThis complicates your animation equation, since you have to normalize your time and change intervals, but the\npayoff is a smoother animation, since you're doing fewer computations.\n\nThe above is better for caching then for example something like:\n\n```javascript\n// This is hard to cache, since there's going to be cache entries for each combination of arguments\neaseInOutSine: function (startValue, changeInValue, msElapsed, msDuration) {\n    return -changeInValue/2 * (Math.cos(Math.PI * msElapsed/msDuration) - 1) + startValue;\n},\n```\n\nNormalizing your easing equations to improve caching is fine and dandy, but it certainly isn't very user friendly unless\nyour easing equation or animation engine handles the normalization. Then you can go back to having nice arguments.\n\nThe disadvantage of rolling your normalization into your easing equation is that you have to recalculate the change\nin value from the start and end value at each tick. Also, it doesn't seem like normalization is a job for an easing\n equation. So, let's put the normalization into the animation engine.\n\nFor example, adding normalization to `easeInOutSine` and moving a box around would make something like:\n\n```javascript\n// The animation equation with user friendly arguments\n// This will take care of normalization before calling the easing equation,\n// * tickHook - function that get called on each tick with the updated number\n// * startNum - initial value\n// * endNum - final value\n// * duration - how long animation last in milliseconds\n// * callback - (optional) function to call when animation finishes\n// * easingEq - (optional) easing equation\n    var animate = function (tickHook, startNum, endNum, duration, callback, easingEq) {\n\n        var easingEq = easingEq || easing.easeInOutSine,\n            changeInNum = endNum - startNum,\n            startTime = new Date().getTime(),\n\n            // The engine that runs the animation\n            engine = function () {\n                var now = new Date().getTime(),\n\n                    // Calculate the normalized time elapsed for the easing function\n                    timeNorm = (now - startTime) / duration,\n\n                    // Calculate the normalized completion from the normalized time\n                    // using the easing function\n                    completionNorm = easingEq(timeNorm),\n\n                    // \"un-normalize\" to calculate the new actual number\n                    newNum = startNum + completionNorm * changeInNum;\n\n                if (now - startTime > duration) {\n\n                    if (callback) {\n                        callback();\n                    }\n                } else {\n\n                    // Update interested parties with the new number once per tick\n                    tickHook(newNum);\n\n                    // Kick off the next tick\n                    requestAnimationFrame(engine);\n                }\n            };\n\n        requestAnimationFrame(engine);\n    },\n// and the implentation goes here...\n```\n\n[**jsFiddle example**](http://jsfiddle.net/pajtai/gAAp2/show) ([code](http://jsfiddle.net/pajtai/gAAp2/))\n\nIn fact the caching could probably move out of the easing equation too in order to keep the equation clean. You can\nroll your own caching (a.k.a. memoization) function, or you can use something like [**Underscore's memoize**](http://underscorejs.org/#memoize).\n","slug":"ease-your-cache","published":1,"updated":"2018-12-25T07:00:27.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kv70006ibyqszt6xuma","content":"<h2 id=\"Easing-4-sentence-intro\"><a href=\"#Easing-4-sentence-intro\" class=\"headerlink\" title=\"Easing: 4 sentence intro\"></a>Easing: 4 sentence intro</h2><p>Easing is how an animation moves from initial state to completion over time. Easing is described by an equation or set of<br>equations. Using easing will make your animation look more polished and appealing.</p>\n<p><a href=\"http://easings.net/\" target=\"_blank\" rel=\"noopener\">Here</a> are visualization for several easing equations.</p>\n<h2 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h2><p>Easing functions can get pretty complicated. They often include notoriously slow methods like sine or cosine. This<br>means that you should cache your easing results.</p>\n<p>The problem is that if your easing equations are not normalized to one unit of time and one unit of completion, then<br>this caching will not be useful.</p>\n<p>In other words, pass in only a normalized <code>t</code>, so that you have the maximum chance of hitting a cached <code>y</code>. Basically,<br>we’re drawing a curve, and once we calculate a point on that curve, we want to cache our calculation. If we don’t<br>normalize our easing equation then we must draw many curves, but if we do normalize then we only need one curve, and<br>so we can store points on that single curve from all our animations that share the same easing function.</p>\n<p>Below is an example for easing in and out with a sine function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easeInOutSine = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our cache in a closure</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The actual easing function returned to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the value is not in the cache, put it in the cache</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! cache[t]) &#123;</span><br><span class=\"line\">       cache[t] = <span class=\"number\">-1</span>/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t) - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We return from the cache, knowing our value is there</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache[t];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/VX5xK/show/\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle using the above</strong></a> - (<a href=\"http://jsfiddle.net/pajtai/VX5xK/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>Or, if you are an <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"noopener\">underscore</a> fan:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use underscores built in memoize for caching</span></span><br><span class=\"line\">easeInOutSine: _.memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI*t) - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/8kU85/show/\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle using the above</strong></a> - (<a href=\"http://jsfiddle.net/pajtai/8kU85/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>This complicates your animation equation, since you have to normalize your time and change intervals, but the<br>payoff is a smoother animation, since you’re doing fewer computations.</p>\n<p>The above is better for caching then for example something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is hard to cache, since there's going to be cache entries for each combination of arguments</span></span><br><span class=\"line\">easeInOutSine: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">startValue, changeInValue, msElapsed, msDuration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -changeInValue/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * msElapsed/msDuration) - <span class=\"number\">1</span>) + startValue;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>Normalizing your easing equations to improve caching is fine and dandy, but it certainly isn’t very user friendly unless<br>your easing equation or animation engine handles the normalization. Then you can go back to having nice arguments.</p>\n<p>The disadvantage of rolling your normalization into your easing equation is that you have to recalculate the change<br>in value from the start and end value at each tick. Also, it doesn’t seem like normalization is a job for an easing<br> equation. So, let’s put the normalization into the animation engine.</p>\n<p>For example, adding normalization to <code>easeInOutSine</code> and moving a box around would make something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The animation equation with user friendly arguments</span></span><br><span class=\"line\"><span class=\"comment\">// This will take care of normalization before calling the easing equation,</span></span><br><span class=\"line\"><span class=\"comment\">// * tickHook - function that get called on each tick with the updated number</span></span><br><span class=\"line\"><span class=\"comment\">// * startNum - initial value</span></span><br><span class=\"line\"><span class=\"comment\">// * endNum - final value</span></span><br><span class=\"line\"><span class=\"comment\">// * duration - how long animation last in milliseconds</span></span><br><span class=\"line\"><span class=\"comment\">// * callback - (optional) function to call when animation finishes</span></span><br><span class=\"line\"><span class=\"comment\">// * easingEq - (optional) easing equation</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tickHook, startNum, endNum, duration, callback, easingEq</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> easingEq = easingEq || easing.easeInOutSine,</span><br><span class=\"line\">            changeInNum = endNum - startNum,</span><br><span class=\"line\">            startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// The engine that runs the animation</span></span><br><span class=\"line\">            engine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Calculate the normalized time elapsed for the easing function</span></span><br><span class=\"line\">                    timeNorm = (now - startTime) / duration,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Calculate the normalized completion from the normalized time</span></span><br><span class=\"line\">                    <span class=\"comment\">// using the easing function</span></span><br><span class=\"line\">                    completionNorm = easingEq(timeNorm),</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// \"un-normalize\" to calculate the new actual number</span></span><br><span class=\"line\">                    newNum = startNum + completionNorm * changeInNum;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now - startTime &gt; duration) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                        callback();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Update interested parties with the new number once per tick</span></span><br><span class=\"line\">                    tickHook(newNum);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Kick off the next tick</span></span><br><span class=\"line\">                    requestAnimationFrame(engine);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        requestAnimationFrame(engine);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// and the implentation goes here...</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/gAAp2/show\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle example</strong></a> (<a href=\"http://jsfiddle.net/pajtai/gAAp2/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>In fact the caching could probably move out of the easing equation too in order to keep the equation clean. You can<br>roll your own caching (a.k.a. memoization) function, or you can use something like <a href=\"http://underscorejs.org/#memoize\" target=\"_blank\" rel=\"noopener\"><strong>Underscore’s memoize</strong></a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Easing-4-sentence-intro\"><a href=\"#Easing-4-sentence-intro\" class=\"headerlink\" title=\"Easing: 4 sentence intro\"></a>Easing: 4 sentence intro</h2><p>Easing is how an animation moves from initial state to completion over time. Easing is described by an equation or set of<br>equations. Using easing will make your animation look more polished and appealing.</p>\n<p><a href=\"http://easings.net/\" target=\"_blank\" rel=\"noopener\">Here</a> are visualization for several easing equations.</p>\n<h2 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h2><p>Easing functions can get pretty complicated. They often include notoriously slow methods like sine or cosine. This<br>means that you should cache your easing results.</p>\n<p>The problem is that if your easing equations are not normalized to one unit of time and one unit of completion, then<br>this caching will not be useful.</p>\n<p>In other words, pass in only a normalized <code>t</code>, so that you have the maximum chance of hitting a cached <code>y</code>. Basically,<br>we’re drawing a curve, and once we calculate a point on that curve, we want to cache our calculation. If we don’t<br>normalize our easing equation then we must draw many curves, but if we do normalize then we only need one curve, and<br>so we can store points on that single curve from all our animations that share the same easing function.</p>\n<p>Below is an example for easing in and out with a sine function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easeInOutSine = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our cache in a closure</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The actual easing function returned to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the value is not in the cache, put it in the cache</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (! cache[t]) &#123;</span><br><span class=\"line\">       cache[t] = <span class=\"number\">-1</span>/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t) - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We return from the cache, knowing our value is there</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache[t];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/VX5xK/show/\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle using the above</strong></a> - (<a href=\"http://jsfiddle.net/pajtai/VX5xK/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>Or, if you are an <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"noopener\">underscore</a> fan:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use underscores built in memoize for caching</span></span><br><span class=\"line\">easeInOutSine: _.memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI*t) - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/8kU85/show/\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle using the above</strong></a> - (<a href=\"http://jsfiddle.net/pajtai/8kU85/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>This complicates your animation equation, since you have to normalize your time and change intervals, but the<br>payoff is a smoother animation, since you’re doing fewer computations.</p>\n<p>The above is better for caching then for example something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is hard to cache, since there's going to be cache entries for each combination of arguments</span></span><br><span class=\"line\">easeInOutSine: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">startValue, changeInValue, msElapsed, msDuration</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -changeInValue/<span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * msElapsed/msDuration) - <span class=\"number\">1</span>) + startValue;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>Normalizing your easing equations to improve caching is fine and dandy, but it certainly isn’t very user friendly unless<br>your easing equation or animation engine handles the normalization. Then you can go back to having nice arguments.</p>\n<p>The disadvantage of rolling your normalization into your easing equation is that you have to recalculate the change<br>in value from the start and end value at each tick. Also, it doesn’t seem like normalization is a job for an easing<br> equation. So, let’s put the normalization into the animation engine.</p>\n<p>For example, adding normalization to <code>easeInOutSine</code> and moving a box around would make something like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The animation equation with user friendly arguments</span></span><br><span class=\"line\"><span class=\"comment\">// This will take care of normalization before calling the easing equation,</span></span><br><span class=\"line\"><span class=\"comment\">// * tickHook - function that get called on each tick with the updated number</span></span><br><span class=\"line\"><span class=\"comment\">// * startNum - initial value</span></span><br><span class=\"line\"><span class=\"comment\">// * endNum - final value</span></span><br><span class=\"line\"><span class=\"comment\">// * duration - how long animation last in milliseconds</span></span><br><span class=\"line\"><span class=\"comment\">// * callback - (optional) function to call when animation finishes</span></span><br><span class=\"line\"><span class=\"comment\">// * easingEq - (optional) easing equation</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tickHook, startNum, endNum, duration, callback, easingEq</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> easingEq = easingEq || easing.easeInOutSine,</span><br><span class=\"line\">            changeInNum = endNum - startNum,</span><br><span class=\"line\">            startTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// The engine that runs the animation</span></span><br><span class=\"line\">            engine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Calculate the normalized time elapsed for the easing function</span></span><br><span class=\"line\">                    timeNorm = (now - startTime) / duration,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Calculate the normalized completion from the normalized time</span></span><br><span class=\"line\">                    <span class=\"comment\">// using the easing function</span></span><br><span class=\"line\">                    completionNorm = easingEq(timeNorm),</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// \"un-normalize\" to calculate the new actual number</span></span><br><span class=\"line\">                    newNum = startNum + completionNorm * changeInNum;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now - startTime &gt; duration) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                        callback();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Update interested parties with the new number once per tick</span></span><br><span class=\"line\">                    tickHook(newNum);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Kick off the next tick</span></span><br><span class=\"line\">                    requestAnimationFrame(engine);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        requestAnimationFrame(engine);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// and the implentation goes here...</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://jsfiddle.net/pajtai/gAAp2/show\" target=\"_blank\" rel=\"noopener\"><strong>jsFiddle example</strong></a> (<a href=\"http://jsfiddle.net/pajtai/gAAp2/\" target=\"_blank\" rel=\"noopener\">code</a>)</p>\n<p>In fact the caching could probably move out of the easing equation too in order to keep the equation clean. You can<br>roll your own caching (a.k.a. memoization) function, or you can use something like <a href=\"http://underscorejs.org/#memoize\" target=\"_blank\" rel=\"noopener\"><strong>Underscore’s memoize</strong></a>.</p>\n"},{"title":"If it is impossible, it did not happen","date":"2013-08-08T05:12:32.000Z","_content":"If a bug can only be explained by an impossible event, then - almost always - your assumptions\nof what happened are wrong, and once in a blue moon, your understanding of the possible is\nincomplete.\n\nI was working on a section of code in a large, old, and tangled code base. I passed a method three arguments, but the method only\nadmitted to receiving two. The code looked something like this:\n\n```javascript\nfunction checkPurchase(item, price, budget) {\n    console.log(item + ' - ' + price + ' - ' + budget + ' - ' + arguments.length);\n    ...\n}\n\n...\ncheckPurchase(\"item\", \"price\", \"budget\");\n```\n\nThe above always showed:\n```\nitem - price - undefined - 2\n```\n\nThis looks like some sort of horrible core JavaScript bug where arguments are being lost. Clearly\nthis is approaching the level of impossible. After hunting around for a while, I realized\nthe method was being spied on and called through, but only the first two of the arguments were being passed\non, since the legacy code only had two arguments..... the spy had been baked into the code\nfor some quick testing in an unrelated file and forgotten about.... so somewhere else in the\ncodebase there was a:\n\n```javascript\nvar oldCheckPurchase = checkPurchase;\ncheckPurchase = function(item, price) {\n    // Do some checks etc here\n    ...\n    oldCheckPurchase(item, price);\n}\n```\n\nSo if the only possible solution for your bug is something close to impossible - like JavaScript\nrandomly dropping the third argument of one specific method - then you probably failed to\nconsider something much more likely.\n","source":"_posts/if-it-is-impossible-it-did-not-happen.md","raw":"---\ntitle: 'If it is impossible, it did not happen'\ndate: 2013-08-07 22:12:32\ntags:\n- logic\n- style\n---\nIf a bug can only be explained by an impossible event, then - almost always - your assumptions\nof what happened are wrong, and once in a blue moon, your understanding of the possible is\nincomplete.\n\nI was working on a section of code in a large, old, and tangled code base. I passed a method three arguments, but the method only\nadmitted to receiving two. The code looked something like this:\n\n```javascript\nfunction checkPurchase(item, price, budget) {\n    console.log(item + ' - ' + price + ' - ' + budget + ' - ' + arguments.length);\n    ...\n}\n\n...\ncheckPurchase(\"item\", \"price\", \"budget\");\n```\n\nThe above always showed:\n```\nitem - price - undefined - 2\n```\n\nThis looks like some sort of horrible core JavaScript bug where arguments are being lost. Clearly\nthis is approaching the level of impossible. After hunting around for a while, I realized\nthe method was being spied on and called through, but only the first two of the arguments were being passed\non, since the legacy code only had two arguments..... the spy had been baked into the code\nfor some quick testing in an unrelated file and forgotten about.... so somewhere else in the\ncodebase there was a:\n\n```javascript\nvar oldCheckPurchase = checkPurchase;\ncheckPurchase = function(item, price) {\n    // Do some checks etc here\n    ...\n    oldCheckPurchase(item, price);\n}\n```\n\nSo if the only possible solution for your bug is something close to impossible - like JavaScript\nrandomly dropping the third argument of one specific method - then you probably failed to\nconsider something much more likely.\n","slug":"if-it-is-impossible-it-did-not-happen","published":1,"updated":"2018-12-25T06:14:11.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kv80007ibyql836y3il","content":"<p>If a bug can only be explained by an impossible event, then - almost always - your assumptions<br>of what happened are wrong, and once in a blue moon, your understanding of the possible is<br>incomplete.</p>\n<p>I was working on a section of code in a large, old, and tangled code base. I passed a method three arguments, but the method only<br>admitted to receiving two. The code looked something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPurchase</span>(<span class=\"params\">item, price, budget</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item + <span class=\"string\">' - '</span> + price + <span class=\"string\">' - '</span> + budget + <span class=\"string\">' - '</span> + <span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">checkPurchase(<span class=\"string\">\"item\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"budget\"</span>);</span><br></pre></td></tr></table></figure>\n<p>The above always showed:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item - price - undefined - 2</span><br></pre></td></tr></table></figure></p>\n<p>This looks like some sort of horrible core JavaScript bug where arguments are being lost. Clearly<br>this is approaching the level of impossible. After hunting around for a while, I realized<br>the method was being spied on and called through, but only the first two of the arguments were being passed<br>on, since the legacy code only had two arguments….. the spy had been baked into the code<br>for some quick testing in an unrelated file and forgotten about…. so somewhere else in the<br>codebase there was a:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldCheckPurchase = checkPurchase;</span><br><span class=\"line\">checkPurchase = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, price</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do some checks etc here</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    oldCheckPurchase(item, price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So if the only possible solution for your bug is something close to impossible - like JavaScript<br>randomly dropping the third argument of one specific method - then you probably failed to<br>consider something much more likely.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If a bug can only be explained by an impossible event, then - almost always - your assumptions<br>of what happened are wrong, and once in a blue moon, your understanding of the possible is<br>incomplete.</p>\n<p>I was working on a section of code in a large, old, and tangled code base. I passed a method three arguments, but the method only<br>admitted to receiving two. The code looked something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPurchase</span>(<span class=\"params\">item, price, budget</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item + <span class=\"string\">' - '</span> + price + <span class=\"string\">' - '</span> + budget + <span class=\"string\">' - '</span> + <span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">checkPurchase(<span class=\"string\">\"item\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"budget\"</span>);</span><br></pre></td></tr></table></figure>\n<p>The above always showed:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item - price - undefined - 2</span><br></pre></td></tr></table></figure></p>\n<p>This looks like some sort of horrible core JavaScript bug where arguments are being lost. Clearly<br>this is approaching the level of impossible. After hunting around for a while, I realized<br>the method was being spied on and called through, but only the first two of the arguments were being passed<br>on, since the legacy code only had two arguments….. the spy had been baked into the code<br>for some quick testing in an unrelated file and forgotten about…. so somewhere else in the<br>codebase there was a:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldCheckPurchase = checkPurchase;</span><br><span class=\"line\">checkPurchase = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, price</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do some checks etc here</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    oldCheckPurchase(item, price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So if the only possible solution for your bug is something close to impossible - like JavaScript<br>randomly dropping the third argument of one specific method - then you probably failed to<br>consider something much more likely.</p>\n"},{"title":"Effort is a zero sum game","date":"2016-01-16T08:00:00.000Z","type":"post","_content":"\nBeing judged based on results is scary. There are no guarantees. Sometimes creators feel that being judged based on \neffort is better. The problem is that effort is taken from a limited pool while results are not.\n\nWe've all spent a week working on something and then it turns out that that wasn't at all what the client had in mind... \nwell, or at least I have. This is when it's tempting to ask for credit on all that work. The problem is that being judged \non effort is bundled with a few things that you probably don't want.\n\nThe most straight forward way to judge by effort is to use hours worked. The problem with hours worked is that you max \nout at 168 a week. Also the more you work the less time you have for fun, family, and friends. You add to effort, and \nyou must remove something valuable you have in a one to one trade-off. Don't get me wrong, there is an upside. The upside \nis that payment is guaranteed. You put in the time, you get the gold star. You get the gold star whether that client is \never going to ask you for anything else, whether your project is maintainable, whether you just sat in your chair the \nwhole week browsed reddit while collecting toe jam. That sounds like a sweet deal when you first start to work. But \neventually you'll want a raise. So you start working more hours to get it. Then you want another raise, and eventually \nyou don't have any more hours left to work.\n\nOn the flip side of that is getting judged by results. How happy is the client? How much revenue does your code generate? \nWhen you first get hired this sounds terrifying. You can barely log onto a server or write a few lines of code, so it's \nmuch safer to count hours. But as you gain experience, you realize that you can ship product, and hopefully you're even \ngetting a little better and faster over time. Of course getting judged by results is still always scary. The payoff is \nnot guaranteed. Sometimes you think everyone will love that wonderful widget and no one can even use it. So there is \nuncertainty, but the payoff is bigger. If you think hard, or you're just lucky, you can make an awesome app or \nfeature quickly, or you can slam out that month's worth of maintenance by switching libraries and upgrading before lunch.\n\nSo, if you can deliver and you have the stomach for a little uncertainty, you should trust in the long game and get paid \nbased on results. Sure, now and then a project will flop, but the more experience you have, the fewer will, and the \nbetter your results will get on average. With effort you can increase your pay right away by working crazy hours, but you \nmax out and burn out, and you hit your max salary potential very quickly.\n\n","source":"_posts/effort-is-a-zero-sum-game.md","raw":"---\ntitle: Effort is a zero sum game\ndate: 2016-01-16\ntags:\n- work\n- effort\ntype: post\n---\n\nBeing judged based on results is scary. There are no guarantees. Sometimes creators feel that being judged based on \neffort is better. The problem is that effort is taken from a limited pool while results are not.\n\nWe've all spent a week working on something and then it turns out that that wasn't at all what the client had in mind... \nwell, or at least I have. This is when it's tempting to ask for credit on all that work. The problem is that being judged \non effort is bundled with a few things that you probably don't want.\n\nThe most straight forward way to judge by effort is to use hours worked. The problem with hours worked is that you max \nout at 168 a week. Also the more you work the less time you have for fun, family, and friends. You add to effort, and \nyou must remove something valuable you have in a one to one trade-off. Don't get me wrong, there is an upside. The upside \nis that payment is guaranteed. You put in the time, you get the gold star. You get the gold star whether that client is \never going to ask you for anything else, whether your project is maintainable, whether you just sat in your chair the \nwhole week browsed reddit while collecting toe jam. That sounds like a sweet deal when you first start to work. But \neventually you'll want a raise. So you start working more hours to get it. Then you want another raise, and eventually \nyou don't have any more hours left to work.\n\nOn the flip side of that is getting judged by results. How happy is the client? How much revenue does your code generate? \nWhen you first get hired this sounds terrifying. You can barely log onto a server or write a few lines of code, so it's \nmuch safer to count hours. But as you gain experience, you realize that you can ship product, and hopefully you're even \ngetting a little better and faster over time. Of course getting judged by results is still always scary. The payoff is \nnot guaranteed. Sometimes you think everyone will love that wonderful widget and no one can even use it. So there is \nuncertainty, but the payoff is bigger. If you think hard, or you're just lucky, you can make an awesome app or \nfeature quickly, or you can slam out that month's worth of maintenance by switching libraries and upgrading before lunch.\n\nSo, if you can deliver and you have the stomach for a little uncertainty, you should trust in the long game and get paid \nbased on results. Sure, now and then a project will flop, but the more experience you have, the fewer will, and the \nbetter your results will get on average. With effort you can increase your pay right away by working crazy hours, but you \nmax out and burn out, and you hit your max salary potential very quickly.\n\n","slug":"effort-is-a-zero-sum-game","published":1,"updated":"2018-12-25T06:13:31.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kv90009ibyqm16dgci0","content":"<p>Being judged based on results is scary. There are no guarantees. Sometimes creators feel that being judged based on<br>effort is better. The problem is that effort is taken from a limited pool while results are not.</p>\n<p>We’ve all spent a week working on something and then it turns out that that wasn’t at all what the client had in mind…<br>well, or at least I have. This is when it’s tempting to ask for credit on all that work. The problem is that being judged<br>on effort is bundled with a few things that you probably don’t want.</p>\n<p>The most straight forward way to judge by effort is to use hours worked. The problem with hours worked is that you max<br>out at 168 a week. Also the more you work the less time you have for fun, family, and friends. You add to effort, and<br>you must remove something valuable you have in a one to one trade-off. Don’t get me wrong, there is an upside. The upside<br>is that payment is guaranteed. You put in the time, you get the gold star. You get the gold star whether that client is<br>ever going to ask you for anything else, whether your project is maintainable, whether you just sat in your chair the<br>whole week browsed reddit while collecting toe jam. That sounds like a sweet deal when you first start to work. But<br>eventually you’ll want a raise. So you start working more hours to get it. Then you want another raise, and eventually<br>you don’t have any more hours left to work.</p>\n<p>On the flip side of that is getting judged by results. How happy is the client? How much revenue does your code generate?<br>When you first get hired this sounds terrifying. You can barely log onto a server or write a few lines of code, so it’s<br>much safer to count hours. But as you gain experience, you realize that you can ship product, and hopefully you’re even<br>getting a little better and faster over time. Of course getting judged by results is still always scary. The payoff is<br>not guaranteed. Sometimes you think everyone will love that wonderful widget and no one can even use it. So there is<br>uncertainty, but the payoff is bigger. If you think hard, or you’re just lucky, you can make an awesome app or<br>feature quickly, or you can slam out that month’s worth of maintenance by switching libraries and upgrading before lunch.</p>\n<p>So, if you can deliver and you have the stomach for a little uncertainty, you should trust in the long game and get paid<br>based on results. Sure, now and then a project will flop, but the more experience you have, the fewer will, and the<br>better your results will get on average. With effort you can increase your pay right away by working crazy hours, but you<br>max out and burn out, and you hit your max salary potential very quickly.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Being judged based on results is scary. There are no guarantees. Sometimes creators feel that being judged based on<br>effort is better. The problem is that effort is taken from a limited pool while results are not.</p>\n<p>We’ve all spent a week working on something and then it turns out that that wasn’t at all what the client had in mind…<br>well, or at least I have. This is when it’s tempting to ask for credit on all that work. The problem is that being judged<br>on effort is bundled with a few things that you probably don’t want.</p>\n<p>The most straight forward way to judge by effort is to use hours worked. The problem with hours worked is that you max<br>out at 168 a week. Also the more you work the less time you have for fun, family, and friends. You add to effort, and<br>you must remove something valuable you have in a one to one trade-off. Don’t get me wrong, there is an upside. The upside<br>is that payment is guaranteed. You put in the time, you get the gold star. You get the gold star whether that client is<br>ever going to ask you for anything else, whether your project is maintainable, whether you just sat in your chair the<br>whole week browsed reddit while collecting toe jam. That sounds like a sweet deal when you first start to work. But<br>eventually you’ll want a raise. So you start working more hours to get it. Then you want another raise, and eventually<br>you don’t have any more hours left to work.</p>\n<p>On the flip side of that is getting judged by results. How happy is the client? How much revenue does your code generate?<br>When you first get hired this sounds terrifying. You can barely log onto a server or write a few lines of code, so it’s<br>much safer to count hours. But as you gain experience, you realize that you can ship product, and hopefully you’re even<br>getting a little better and faster over time. Of course getting judged by results is still always scary. The payoff is<br>not guaranteed. Sometimes you think everyone will love that wonderful widget and no one can even use it. So there is<br>uncertainty, but the payoff is bigger. If you think hard, or you’re just lucky, you can make an awesome app or<br>feature quickly, or you can slam out that month’s worth of maintenance by switching libraries and upgrading before lunch.</p>\n<p>So, if you can deliver and you have the stomach for a little uncertainty, you should trust in the long game and get paid<br>based on results. Sure, now and then a project will flop, but the more experience you have, the fewer will, and the<br>better your results will get on average. With effort you can increase your pay right away by working crazy hours, but you<br>max out and burn out, and you hit your max salary potential very quickly.</p>\n"},{"title":"Javascript quizzes","date":"2012-02-05T08:00:00.000Z","_content":"<p>These are the Javascript quizzes I've <a href=\"https://twitter.com/Peter_Ajtai\">Tweeted</a> and put up on\n<a href=\"http://jsfiddle.net/user/pajtai/fiddles/\">jsFiddle</a>.\n</p>\n\n<noscript>Important functionality on this page relies on Javascript. Please enable it if you want to see the content.</noscript>\n\n<ul id=\"quizzes\">\n</ul>\n\n<script type=\"text/javascript\">\n(function() {\n    var quizEl = document.getElementById(\"quizzes\"),\n            i, ii,\n            ellie, ellie2, ellie3, tags,\n            a,\n            quizzes = [\n                {\"url\":\"5TZsw\",\"tags\":[\"closures\",\"references\"]},\n                {\"url\":\"6Shd9\",\"tags\":[\"hoisting\"]},\n                {\"url\":\"yGmAf\",\"tags\":[\"Date\",\"timeouts\",\"references\",\"scope\"]},\n                {\"url\":\"Hm8YA\",\"tags\":[\"length\",\"arguments\",\"Function\"]},\n                {\"url\":\"x6WkV\",\"tags\":[\"inheritance\",\"prototype\"]},\n                {\"url\":\"PSTja\",\"tags\":[\"typeof\",\"instanceof\",\"constructor\"]},\n                {\"url\":\"k4PJm\",\"tags\":[\"Booleans\",\"Objects\"]},\n                {\"url\":\"U5uaS\",\"tags\":[\"logic\"]},\n                {\"url\":\"YBXhD\",\"tags\":[\"Arrays\",\"length\",\"addition\",\"concatenation\"]},\n                {\"url\":\"66yrD\",\"tags\":[\"setInterval\",\"setTimeout\",\"chaining\"]},\n                {\"url\":\"ejGX2\",\"tags\":[\"variable assignment\",\"arguments\"]},\n                {\"url\":\"fnTpG\",\"tags\":[\"type conversion\"]},\n                {\"url\":\"eJ5ru\",\"tags\":[\"scope\", \"this\"]},\n                {\"url\":\"X2gXf\",\"tags\":[\"globals\"]},\n                {\"url\":\"Tqrx6\",\"tags\":[\"constructors\"]},\n            ],\n            quizzesLength = quizzes.length,\n            quizTagsLength;\n\n    for (i = 0; i < quizzesLength; ++i) {\n        ellie = document.createElement('li');\n        a  = document.createElement('a');\n        a.href = \"http://jsfiddle.net/pajtai/\" + quizzes[i].url + \"/show/\";\n        quizEl.appendChild(ellie);\n        ellie.appendChild(a);\n        a.appendChild(document.createTextNode(\"Quiz \" + (i + 1)));\n        ellie2 = document.createElement('ul');\n        ellie3 = document.createElement('li');\n        ellie2.appendChild(ellie3);\n        ellie.appendChild(ellie2);\n        tags = [];\n        quizTagsLength = quizzes[i].tags.length;\n        for (ii = 0; ii < quizTagsLength; ++ii) {\n            tags.push(quizzes[i].tags[ii]);\n        }\n        ellie3.appendChild(document.createTextNode(tags.join(\", \")));\n    }\n}());\n</script>\n","source":"_posts/javascript-quizzes.md","raw":"---\ntitle: Javascript quizzes\ndate: 2012-02-05\ntags:\n- javascript\n- quizzes\n---\n<p>These are the Javascript quizzes I've <a href=\"https://twitter.com/Peter_Ajtai\">Tweeted</a> and put up on\n<a href=\"http://jsfiddle.net/user/pajtai/fiddles/\">jsFiddle</a>.\n</p>\n\n<noscript>Important functionality on this page relies on Javascript. Please enable it if you want to see the content.</noscript>\n\n<ul id=\"quizzes\">\n</ul>\n\n<script type=\"text/javascript\">\n(function() {\n    var quizEl = document.getElementById(\"quizzes\"),\n            i, ii,\n            ellie, ellie2, ellie3, tags,\n            a,\n            quizzes = [\n                {\"url\":\"5TZsw\",\"tags\":[\"closures\",\"references\"]},\n                {\"url\":\"6Shd9\",\"tags\":[\"hoisting\"]},\n                {\"url\":\"yGmAf\",\"tags\":[\"Date\",\"timeouts\",\"references\",\"scope\"]},\n                {\"url\":\"Hm8YA\",\"tags\":[\"length\",\"arguments\",\"Function\"]},\n                {\"url\":\"x6WkV\",\"tags\":[\"inheritance\",\"prototype\"]},\n                {\"url\":\"PSTja\",\"tags\":[\"typeof\",\"instanceof\",\"constructor\"]},\n                {\"url\":\"k4PJm\",\"tags\":[\"Booleans\",\"Objects\"]},\n                {\"url\":\"U5uaS\",\"tags\":[\"logic\"]},\n                {\"url\":\"YBXhD\",\"tags\":[\"Arrays\",\"length\",\"addition\",\"concatenation\"]},\n                {\"url\":\"66yrD\",\"tags\":[\"setInterval\",\"setTimeout\",\"chaining\"]},\n                {\"url\":\"ejGX2\",\"tags\":[\"variable assignment\",\"arguments\"]},\n                {\"url\":\"fnTpG\",\"tags\":[\"type conversion\"]},\n                {\"url\":\"eJ5ru\",\"tags\":[\"scope\", \"this\"]},\n                {\"url\":\"X2gXf\",\"tags\":[\"globals\"]},\n                {\"url\":\"Tqrx6\",\"tags\":[\"constructors\"]},\n            ],\n            quizzesLength = quizzes.length,\n            quizTagsLength;\n\n    for (i = 0; i < quizzesLength; ++i) {\n        ellie = document.createElement('li');\n        a  = document.createElement('a');\n        a.href = \"http://jsfiddle.net/pajtai/\" + quizzes[i].url + \"/show/\";\n        quizEl.appendChild(ellie);\n        ellie.appendChild(a);\n        a.appendChild(document.createTextNode(\"Quiz \" + (i + 1)));\n        ellie2 = document.createElement('ul');\n        ellie3 = document.createElement('li');\n        ellie2.appendChild(ellie3);\n        ellie.appendChild(ellie2);\n        tags = [];\n        quizTagsLength = quizzes[i].tags.length;\n        for (ii = 0; ii < quizTagsLength; ++ii) {\n            tags.push(quizzes[i].tags[ii]);\n        }\n        ellie3.appendChild(document.createTextNode(tags.join(\", \")));\n    }\n}());\n</script>\n","slug":"javascript-quizzes","published":1,"updated":"2018-12-25T06:13:31.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kva000aibyqipq2iv7x","content":"<p>These are the Javascript quizzes I’ve <a href=\"https://twitter.com/Peter_Ajtai\" target=\"_blank\" rel=\"noopener\">Tweeted</a> and put up on<br><a href=\"http://jsfiddle.net/user/pajtai/fiddles/\" target=\"_blank\" rel=\"noopener\">jsFiddle</a>.<br></p>\n\n<noscript>Important functionality on this page relies on Javascript. Please enable it if you want to see the content.</noscript>\n\n<ul id=\"quizzes\"><br></ul>\n\n<script type=\"text/javascript\">\n(function() {\n    var quizEl = document.getElementById(\"quizzes\"),\n            i, ii,\n            ellie, ellie2, ellie3, tags,\n            a,\n            quizzes = [\n                {\"url\":\"5TZsw\",\"tags\":[\"closures\",\"references\"]},\n                {\"url\":\"6Shd9\",\"tags\":[\"hoisting\"]},\n                {\"url\":\"yGmAf\",\"tags\":[\"Date\",\"timeouts\",\"references\",\"scope\"]},\n                {\"url\":\"Hm8YA\",\"tags\":[\"length\",\"arguments\",\"Function\"]},\n                {\"url\":\"x6WkV\",\"tags\":[\"inheritance\",\"prototype\"]},\n                {\"url\":\"PSTja\",\"tags\":[\"typeof\",\"instanceof\",\"constructor\"]},\n                {\"url\":\"k4PJm\",\"tags\":[\"Booleans\",\"Objects\"]},\n                {\"url\":\"U5uaS\",\"tags\":[\"logic\"]},\n                {\"url\":\"YBXhD\",\"tags\":[\"Arrays\",\"length\",\"addition\",\"concatenation\"]},\n                {\"url\":\"66yrD\",\"tags\":[\"setInterval\",\"setTimeout\",\"chaining\"]},\n                {\"url\":\"ejGX2\",\"tags\":[\"variable assignment\",\"arguments\"]},\n                {\"url\":\"fnTpG\",\"tags\":[\"type conversion\"]},\n                {\"url\":\"eJ5ru\",\"tags\":[\"scope\", \"this\"]},\n                {\"url\":\"X2gXf\",\"tags\":[\"globals\"]},\n                {\"url\":\"Tqrx6\",\"tags\":[\"constructors\"]},\n            ],\n            quizzesLength = quizzes.length,\n            quizTagsLength;\n\n    for (i = 0; i < quizzesLength; ++i) {\n        ellie = document.createElement('li');\n        a  = document.createElement('a');\n        a.href = \"http://jsfiddle.net/pajtai/\" + quizzes[i].url + \"/show/\";\n        quizEl.appendChild(ellie);\n        ellie.appendChild(a);\n        a.appendChild(document.createTextNode(\"Quiz \" + (i + 1)));\n        ellie2 = document.createElement('ul');\n        ellie3 = document.createElement('li');\n        ellie2.appendChild(ellie3);\n        ellie.appendChild(ellie2);\n        tags = [];\n        quizTagsLength = quizzes[i].tags.length;\n        for (ii = 0; ii < quizTagsLength; ++ii) {\n            tags.push(quizzes[i].tags[ii]);\n        }\n        ellie3.appendChild(document.createTextNode(tags.join(\", \")));\n    }\n}());\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p>These are the Javascript quizzes I’ve <a href=\"https://twitter.com/Peter_Ajtai\" target=\"_blank\" rel=\"noopener\">Tweeted</a> and put up on<br><a href=\"http://jsfiddle.net/user/pajtai/fiddles/\" target=\"_blank\" rel=\"noopener\">jsFiddle</a>.<br></p>\n\n<noscript>Important functionality on this page relies on Javascript. Please enable it if you want to see the content.</noscript>\n\n<ul id=\"quizzes\"><br></ul>\n\n<script type=\"text/javascript\">\n(function() {\n    var quizEl = document.getElementById(\"quizzes\"),\n            i, ii,\n            ellie, ellie2, ellie3, tags,\n            a,\n            quizzes = [\n                {\"url\":\"5TZsw\",\"tags\":[\"closures\",\"references\"]},\n                {\"url\":\"6Shd9\",\"tags\":[\"hoisting\"]},\n                {\"url\":\"yGmAf\",\"tags\":[\"Date\",\"timeouts\",\"references\",\"scope\"]},\n                {\"url\":\"Hm8YA\",\"tags\":[\"length\",\"arguments\",\"Function\"]},\n                {\"url\":\"x6WkV\",\"tags\":[\"inheritance\",\"prototype\"]},\n                {\"url\":\"PSTja\",\"tags\":[\"typeof\",\"instanceof\",\"constructor\"]},\n                {\"url\":\"k4PJm\",\"tags\":[\"Booleans\",\"Objects\"]},\n                {\"url\":\"U5uaS\",\"tags\":[\"logic\"]},\n                {\"url\":\"YBXhD\",\"tags\":[\"Arrays\",\"length\",\"addition\",\"concatenation\"]},\n                {\"url\":\"66yrD\",\"tags\":[\"setInterval\",\"setTimeout\",\"chaining\"]},\n                {\"url\":\"ejGX2\",\"tags\":[\"variable assignment\",\"arguments\"]},\n                {\"url\":\"fnTpG\",\"tags\":[\"type conversion\"]},\n                {\"url\":\"eJ5ru\",\"tags\":[\"scope\", \"this\"]},\n                {\"url\":\"X2gXf\",\"tags\":[\"globals\"]},\n                {\"url\":\"Tqrx6\",\"tags\":[\"constructors\"]},\n            ],\n            quizzesLength = quizzes.length,\n            quizTagsLength;\n\n    for (i = 0; i < quizzesLength; ++i) {\n        ellie = document.createElement('li');\n        a  = document.createElement('a');\n        a.href = \"http://jsfiddle.net/pajtai/\" + quizzes[i].url + \"/show/\";\n        quizEl.appendChild(ellie);\n        ellie.appendChild(a);\n        a.appendChild(document.createTextNode(\"Quiz \" + (i + 1)));\n        ellie2 = document.createElement('ul');\n        ellie3 = document.createElement('li');\n        ellie2.appendChild(ellie3);\n        ellie.appendChild(ellie2);\n        tags = [];\n        quizTagsLength = quizzes[i].tags.length;\n        for (ii = 0; ii < quizTagsLength; ++ii) {\n            tags.push(quizzes[i].tags[ii]);\n        }\n        ellie3.appendChild(document.createTextNode(tags.join(\", \")));\n    }\n}());\n</script>\n"},{"title":"Named curies","date":"2013-12-06T08:00:00.000Z","_content":"\nOne of the challenges of using curries is that the usual implementation of a curry looks like a function call and not a\nfunction reference.\n\nFor example:\n\n```javascript\ngreet('bob');\n```\n\nDid the above greet Bob, or did it return a greeting function that is now customized for Bob?\n\n```javascript\nfunction greet(name) {\n    return function(greeting) {\n        alert(greeting + ', ' + name);\n    }\n}\n```\n\nOf course we can improve our naming:\n\n```javascript\ngetFunctionReferenceToGreet('bob')\n```\n\nThe problem with the above is that JavaScript has trained us to expect parentheses to be mean function calls, and\nthe absence of parentheses to mean function references. The above curry violates this. It is the same reason that reading\ncodes with many `bind(this)` calls is slow going.\n\nA solution is to make curries conform to the convention. Creating the curry is a function call, and the curry returns a\nfunction reference:\n\n```javascript\ncreateGreetingFor('bob').greet\n```\n\nUsing the above, you can still scan a file and quickly pick out the function calls and function references without\nhaving to read the function names.\n\nThe above would be implemented as follows:\n\n```javascript\nfunction createGreetingFor(name) {\n    return {\n        greet : function(greeting) {\n            alert(greeting + ', ' + name);\n        }\n    };\n}\n```\n\nand it could be used like this:\n\n```javascript\n// variable assignment\nvar greet = createGreetingFor('bob').greet;\ngreet('good evening');\n\n// callback that looks like a callback\ngoodMorning(createGreetingFor('bob').greet)\n\nfunction goodMorning(greet) {\n    greet('good morning');\n}\n```\n\n\n","source":"_posts/named-curies.md","raw":"---\ntitle: Named curies\ndate: 2013-12-06\ntags:\n- javascript\n- currying\n- lambdas\n- function calls\n- function references\n---\n\nOne of the challenges of using curries is that the usual implementation of a curry looks like a function call and not a\nfunction reference.\n\nFor example:\n\n```javascript\ngreet('bob');\n```\n\nDid the above greet Bob, or did it return a greeting function that is now customized for Bob?\n\n```javascript\nfunction greet(name) {\n    return function(greeting) {\n        alert(greeting + ', ' + name);\n    }\n}\n```\n\nOf course we can improve our naming:\n\n```javascript\ngetFunctionReferenceToGreet('bob')\n```\n\nThe problem with the above is that JavaScript has trained us to expect parentheses to be mean function calls, and\nthe absence of parentheses to mean function references. The above curry violates this. It is the same reason that reading\ncodes with many `bind(this)` calls is slow going.\n\nA solution is to make curries conform to the convention. Creating the curry is a function call, and the curry returns a\nfunction reference:\n\n```javascript\ncreateGreetingFor('bob').greet\n```\n\nUsing the above, you can still scan a file and quickly pick out the function calls and function references without\nhaving to read the function names.\n\nThe above would be implemented as follows:\n\n```javascript\nfunction createGreetingFor(name) {\n    return {\n        greet : function(greeting) {\n            alert(greeting + ', ' + name);\n        }\n    };\n}\n```\n\nand it could be used like this:\n\n```javascript\n// variable assignment\nvar greet = createGreetingFor('bob').greet;\ngreet('good evening');\n\n// callback that looks like a callback\ngoodMorning(createGreetingFor('bob').greet)\n\nfunction goodMorning(greet) {\n    greet('good morning');\n}\n```\n\n\n","slug":"named-curies","published":1,"updated":"2018-12-25T07:01:13.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kvb000cibyq2u4h53qh","content":"<p>One of the challenges of using curries is that the usual implementation of a curry looks like a function call and not a<br>function reference.</p>\n<p>For example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet(<span class=\"string\">'bob'</span>);</span><br></pre></td></tr></table></figure>\n<p>Did the above greet Bob, or did it return a greeting function that is now customized for Bob?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">        alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Of course we can improve our naming:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFunctionReferenceToGreet(<span class=\"string\">'bob'</span>)</span><br></pre></td></tr></table></figure>\n<p>The problem with the above is that JavaScript has trained us to expect parentheses to be mean function calls, and<br>the absence of parentheses to mean function references. The above curry violates this. It is the same reason that reading<br>codes with many <code>bind(this)</code> calls is slow going.</p>\n<p>A solution is to make curries conform to the convention. Creating the curry is a function call, and the curry returns a<br>function reference:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createGreetingFor(<span class=\"string\">'bob'</span>).greet</span><br></pre></td></tr></table></figure>\n<p>Using the above, you can still scan a file and quickly pick out the function calls and function references without<br>having to read the function names.</p>\n<p>The above would be implemented as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGreetingFor</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        greet : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">            alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>and it could be used like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// variable assignment</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greet = createGreetingFor(<span class=\"string\">'bob'</span>).greet;</span><br><span class=\"line\">greet(<span class=\"string\">'good evening'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// callback that looks like a callback</span></span><br><span class=\"line\">goodMorning(createGreetingFor(<span class=\"string\">'bob'</span>).greet)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodMorning</span>(<span class=\"params\">greet</span>) </span>&#123;</span><br><span class=\"line\">    greet(<span class=\"string\">'good morning'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>One of the challenges of using curries is that the usual implementation of a curry looks like a function call and not a<br>function reference.</p>\n<p>For example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet(<span class=\"string\">'bob'</span>);</span><br></pre></td></tr></table></figure>\n<p>Did the above greet Bob, or did it return a greeting function that is now customized for Bob?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">        alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Of course we can improve our naming:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getFunctionReferenceToGreet(<span class=\"string\">'bob'</span>)</span><br></pre></td></tr></table></figure>\n<p>The problem with the above is that JavaScript has trained us to expect parentheses to be mean function calls, and<br>the absence of parentheses to mean function references. The above curry violates this. It is the same reason that reading<br>codes with many <code>bind(this)</code> calls is slow going.</p>\n<p>A solution is to make curries conform to the convention. Creating the curry is a function call, and the curry returns a<br>function reference:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createGreetingFor(<span class=\"string\">'bob'</span>).greet</span><br></pre></td></tr></table></figure>\n<p>Using the above, you can still scan a file and quickly pick out the function calls and function references without<br>having to read the function names.</p>\n<p>The above would be implemented as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createGreetingFor</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        greet : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">            alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>and it could be used like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// variable assignment</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greet = createGreetingFor(<span class=\"string\">'bob'</span>).greet;</span><br><span class=\"line\">greet(<span class=\"string\">'good evening'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// callback that looks like a callback</span></span><br><span class=\"line\">goodMorning(createGreetingFor(<span class=\"string\">'bob'</span>).greet)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goodMorning</span>(<span class=\"params\">greet</span>) </span>&#123;</span><br><span class=\"line\">    greet(<span class=\"string\">'good morning'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Pass the curry","date":"2013-09-16T07:00:00.000Z","_content":"\n_Currying is a functional programming technique that allows you to customize functions. It uses function references to do this._\n\nIn programming a definition for currying is pretty easy to come by, but these definitions don't generally communicate\nthe power of currying to most people.\n\nFor example, from [wikipedia's curry page](http://en.wikipedia.org/wiki/Currying) we can read that:\n\n> In mathematics and computer science, currying is the technique of transforming a function that takes multiple\n> arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single\n> argument (partial application). It was originated by Moses Schönfinkel and later re-discovered by Haskell\n> Curry. Because of this, some say it would be more correct to name it schönfinkeling.\n\nThat doesn't sound very exciting, and unless you're already familiar with currying, it's difficult to see how this\ntechnique can be used in every day JavaScript.\n\nCurrying is a way to allow the customization of individual functions. This means it can be used to build a library of\nfunctions for later use and possible attachment to objects unrelated by an inheritance hierarchy.\n\nFor example, let's say we have a `greet` function. It takes two arguments: who to greet and what to greet with:\n\n```javascript\nfunction greet(name, greeting) {\n    alert(greeting + ', ' + name);\n}\n```\n\nIn certain situations, especially if this function is mixed into objects, you might end up always calling the function\nwith the same `name` argument.\n\n```javascript\nfunction Alarm(alarmOwner) {\n    this.alarmOwner = alarmOwner;\n}\n\n// Mixin the greet function\nAlarm.prototype.greet = greet;\n// Other alarm clock functions\n// ...\n```\n\nSince the alarm will always be greeting its owner, the `greet` method will always be called as follows:\n\n```javascript\nthis.greet(this.alarmOwner, greeting);\n```\n\nThe above is a procedural solution. We're feeding all the data into the function with arguments, and we're not using context.\nThe problem with it is that it can quickly become difficult to manage multiple such methods with many calls to each method.\n\nA possible object oriented solution is to modify the original `greet` function to use a field:\n\n```javascript\nfunction greet(greeting) {\n    alert(greeting + ', ' + this.name);\n}\n```\n\nThe above would work okay with our alarm clock, we could just add `this.name = this.alarmOwner` into the constructor.\nThe problem with this solution is that it ties the use of the method to the availability of a field. In other words, it\nis an object oriented approach, since object are combinations of data and methods. This means that\nyou have to know to add a `this.name` whenever you want to use `greet()`. This is okay, until you start working with\nan object that uses `this.name` for something else. For example let's say you have a CoffeeMaker whose `this.name` is\n`Model XTR4302`. When the CoffeMaker greets you in the morning, it should do so with your name, and not its own model\nname.\n\nThe solution is to put a slight twist on the procedural implementation of `greet(name, greeting)`, we can break the\nfunction into two chained functions. The first call of `greet` will take `name` as an argument, and it will return a\nfunction that has `name` baked into it. This second generated - curried - function can now be called with `greeting`, and\nit will always greet `name`.\n\nSpecifically:\n\n```javascript\nfunction greet(name) {\n\n    return function(greeting) {\n        alert(greeting + ', ' + name);\n    }\n}\n```\n\nThis method is powerful because it creates a customized function with the first call. This is the `chain of functions`\nthat the wikipedia definition of currying refers to. Using currying to build a library of functions, allows the creation\nof extremely flexible libraries.\n\nThere's no need to limit yourself to a single curry. With currying you can do things like setup default options, and\nthen pass in specific options to finally return a customized function:\n\n```javascript\n// Start building your custom function by calling it with the default options object\nfunction customStuff(defaultOptions) {\n\n    // Continue building your custom function by calling it with your specific options for this case\n    return function(options) {\n\n        var config = {};\n\n        _.extend(config, defaultOptions, options);\n\n        // And now you have a customized function with access to the created options / config object, and it can\n        // also be called with any number of arguments\n        return function(arg1, arg2) {\n            // In here we have acces to the final config - a combination of the default and specific options\n            if (config.that && config.other) {\n                // do stuff with arg1 / arg2\n            }\n        }\n    }\n}\n```\n\nThe above is an example of how to customize a function use a combination of default and actual options objects. It is\nvery flexible, and the concept of extending default options with the actual options is used in libraris from Grunt to\nBackbone.\n","source":"_posts/pass-the-curry.md","raw":"---\ntitle: Pass the curry\ndate: 2013-09-16\ntags:\n- javascript\n- currying\n- lambdas\n---\n\n_Currying is a functional programming technique that allows you to customize functions. It uses function references to do this._\n\nIn programming a definition for currying is pretty easy to come by, but these definitions don't generally communicate\nthe power of currying to most people.\n\nFor example, from [wikipedia's curry page](http://en.wikipedia.org/wiki/Currying) we can read that:\n\n> In mathematics and computer science, currying is the technique of transforming a function that takes multiple\n> arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single\n> argument (partial application). It was originated by Moses Schönfinkel and later re-discovered by Haskell\n> Curry. Because of this, some say it would be more correct to name it schönfinkeling.\n\nThat doesn't sound very exciting, and unless you're already familiar with currying, it's difficult to see how this\ntechnique can be used in every day JavaScript.\n\nCurrying is a way to allow the customization of individual functions. This means it can be used to build a library of\nfunctions for later use and possible attachment to objects unrelated by an inheritance hierarchy.\n\nFor example, let's say we have a `greet` function. It takes two arguments: who to greet and what to greet with:\n\n```javascript\nfunction greet(name, greeting) {\n    alert(greeting + ', ' + name);\n}\n```\n\nIn certain situations, especially if this function is mixed into objects, you might end up always calling the function\nwith the same `name` argument.\n\n```javascript\nfunction Alarm(alarmOwner) {\n    this.alarmOwner = alarmOwner;\n}\n\n// Mixin the greet function\nAlarm.prototype.greet = greet;\n// Other alarm clock functions\n// ...\n```\n\nSince the alarm will always be greeting its owner, the `greet` method will always be called as follows:\n\n```javascript\nthis.greet(this.alarmOwner, greeting);\n```\n\nThe above is a procedural solution. We're feeding all the data into the function with arguments, and we're not using context.\nThe problem with it is that it can quickly become difficult to manage multiple such methods with many calls to each method.\n\nA possible object oriented solution is to modify the original `greet` function to use a field:\n\n```javascript\nfunction greet(greeting) {\n    alert(greeting + ', ' + this.name);\n}\n```\n\nThe above would work okay with our alarm clock, we could just add `this.name = this.alarmOwner` into the constructor.\nThe problem with this solution is that it ties the use of the method to the availability of a field. In other words, it\nis an object oriented approach, since object are combinations of data and methods. This means that\nyou have to know to add a `this.name` whenever you want to use `greet()`. This is okay, until you start working with\nan object that uses `this.name` for something else. For example let's say you have a CoffeeMaker whose `this.name` is\n`Model XTR4302`. When the CoffeMaker greets you in the morning, it should do so with your name, and not its own model\nname.\n\nThe solution is to put a slight twist on the procedural implementation of `greet(name, greeting)`, we can break the\nfunction into two chained functions. The first call of `greet` will take `name` as an argument, and it will return a\nfunction that has `name` baked into it. This second generated - curried - function can now be called with `greeting`, and\nit will always greet `name`.\n\nSpecifically:\n\n```javascript\nfunction greet(name) {\n\n    return function(greeting) {\n        alert(greeting + ', ' + name);\n    }\n}\n```\n\nThis method is powerful because it creates a customized function with the first call. This is the `chain of functions`\nthat the wikipedia definition of currying refers to. Using currying to build a library of functions, allows the creation\nof extremely flexible libraries.\n\nThere's no need to limit yourself to a single curry. With currying you can do things like setup default options, and\nthen pass in specific options to finally return a customized function:\n\n```javascript\n// Start building your custom function by calling it with the default options object\nfunction customStuff(defaultOptions) {\n\n    // Continue building your custom function by calling it with your specific options for this case\n    return function(options) {\n\n        var config = {};\n\n        _.extend(config, defaultOptions, options);\n\n        // And now you have a customized function with access to the created options / config object, and it can\n        // also be called with any number of arguments\n        return function(arg1, arg2) {\n            // In here we have acces to the final config - a combination of the default and specific options\n            if (config.that && config.other) {\n                // do stuff with arg1 / arg2\n            }\n        }\n    }\n}\n```\n\nThe above is an example of how to customize a function use a combination of default and actual options objects. It is\nvery flexible, and the concept of extending default options with the actual options is used in libraris from Grunt to\nBackbone.\n","slug":"pass-the-curry","published":1,"updated":"2018-12-25T06:13:52.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kvc000dibyqe0tdc5t4","content":"<p><em>Currying is a functional programming technique that allows you to customize functions. It uses function references to do this.</em></p>\n<p>In programming a definition for currying is pretty easy to come by, but these definitions don’t generally communicate<br>the power of currying to most people.</p>\n<p>For example, from <a href=\"http://en.wikipedia.org/wiki/Currying\" target=\"_blank\" rel=\"noopener\">wikipedia’s curry page</a> we can read that:</p>\n<blockquote>\n<p>In mathematics and computer science, currying is the technique of transforming a function that takes multiple<br>arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single<br>argument (partial application). It was originated by Moses Schönfinkel and later re-discovered by Haskell<br>Curry. Because of this, some say it would be more correct to name it schönfinkeling.</p>\n</blockquote>\n<p>That doesn’t sound very exciting, and unless you’re already familiar with currying, it’s difficult to see how this<br>technique can be used in every day JavaScript.</p>\n<p>Currying is a way to allow the customization of individual functions. This means it can be used to build a library of<br>functions for later use and possible attachment to objects unrelated by an inheritance hierarchy.</p>\n<p>For example, let’s say we have a <code>greet</code> function. It takes two arguments: who to greet and what to greet with:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name, greeting</span>) </span>&#123;</span><br><span class=\"line\">    alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In certain situations, especially if this function is mixed into objects, you might end up always calling the function<br>with the same <code>name</code> argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Alarm</span>(<span class=\"params\">alarmOwner</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alarmOwner = alarmOwner;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mixin the greet function</span></span><br><span class=\"line\">Alarm.prototype.greet = greet;</span><br><span class=\"line\"><span class=\"comment\">// Other alarm clock functions</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Since the alarm will always be greeting its owner, the <code>greet</code> method will always be called as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.greet(<span class=\"keyword\">this</span>.alarmOwner, greeting);</span><br></pre></td></tr></table></figure>\n<p>The above is a procedural solution. We’re feeding all the data into the function with arguments, and we’re not using context.<br>The problem with it is that it can quickly become difficult to manage multiple such methods with many calls to each method.</p>\n<p>A possible object oriented solution is to modify the original <code>greet</code> function to use a field:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">    alert(greeting + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above would work okay with our alarm clock, we could just add <code>this.name = this.alarmOwner</code> into the constructor.<br>The problem with this solution is that it ties the use of the method to the availability of a field. In other words, it<br>is an object oriented approach, since object are combinations of data and methods. This means that<br>you have to know to add a <code>this.name</code> whenever you want to use <code>greet()</code>. This is okay, until you start working with<br>an object that uses <code>this.name</code> for something else. For example let’s say you have a CoffeeMaker whose <code>this.name</code> is<br><code>Model XTR4302</code>. When the CoffeMaker greets you in the morning, it should do so with your name, and not its own model<br>name.</p>\n<p>The solution is to put a slight twist on the procedural implementation of <code>greet(name, greeting)</code>, we can break the<br>function into two chained functions. The first call of <code>greet</code> will take <code>name</code> as an argument, and it will return a<br>function that has <code>name</code> baked into it. This second generated - curried - function can now be called with <code>greeting</code>, and<br>it will always greet <code>name</code>.</p>\n<p>Specifically:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">        alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This method is powerful because it creates a customized function with the first call. This is the <code>chain of functions</code><br>that the wikipedia definition of currying refers to. Using currying to build a library of functions, allows the creation<br>of extremely flexible libraries.</p>\n<p>There’s no need to limit yourself to a single curry. With currying you can do things like setup default options, and<br>then pass in specific options to finally return a customized function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start building your custom function by calling it with the default options object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customStuff</span>(<span class=\"params\">defaultOptions</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Continue building your custom function by calling it with your specific options for this case</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        _.extend(config, defaultOptions, options);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// And now you have a customized function with access to the created options / config object, and it can</span></span><br><span class=\"line\">        <span class=\"comment\">// also be called with any number of arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// In here we have acces to the final config - a combination of the default and specific options</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (config.that &amp;&amp; config.other) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// do stuff with arg1 / arg2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above is an example of how to customize a function use a combination of default and actual options objects. It is<br>very flexible, and the concept of extending default options with the actual options is used in libraris from Grunt to<br>Backbone.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>Currying is a functional programming technique that allows you to customize functions. It uses function references to do this.</em></p>\n<p>In programming a definition for currying is pretty easy to come by, but these definitions don’t generally communicate<br>the power of currying to most people.</p>\n<p>For example, from <a href=\"http://en.wikipedia.org/wiki/Currying\" target=\"_blank\" rel=\"noopener\">wikipedia’s curry page</a> we can read that:</p>\n<blockquote>\n<p>In mathematics and computer science, currying is the technique of transforming a function that takes multiple<br>arguments (or a tuple of arguments) in such a way that it can be called as a chain of functions, each with a single<br>argument (partial application). It was originated by Moses Schönfinkel and later re-discovered by Haskell<br>Curry. Because of this, some say it would be more correct to name it schönfinkeling.</p>\n</blockquote>\n<p>That doesn’t sound very exciting, and unless you’re already familiar with currying, it’s difficult to see how this<br>technique can be used in every day JavaScript.</p>\n<p>Currying is a way to allow the customization of individual functions. This means it can be used to build a library of<br>functions for later use and possible attachment to objects unrelated by an inheritance hierarchy.</p>\n<p>For example, let’s say we have a <code>greet</code> function. It takes two arguments: who to greet and what to greet with:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name, greeting</span>) </span>&#123;</span><br><span class=\"line\">    alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In certain situations, especially if this function is mixed into objects, you might end up always calling the function<br>with the same <code>name</code> argument.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Alarm</span>(<span class=\"params\">alarmOwner</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alarmOwner = alarmOwner;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mixin the greet function</span></span><br><span class=\"line\">Alarm.prototype.greet = greet;</span><br><span class=\"line\"><span class=\"comment\">// Other alarm clock functions</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Since the alarm will always be greeting its owner, the <code>greet</code> method will always be called as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.greet(<span class=\"keyword\">this</span>.alarmOwner, greeting);</span><br></pre></td></tr></table></figure>\n<p>The above is a procedural solution. We’re feeding all the data into the function with arguments, and we’re not using context.<br>The problem with it is that it can quickly become difficult to manage multiple such methods with many calls to each method.</p>\n<p>A possible object oriented solution is to modify the original <code>greet</code> function to use a field:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">    alert(greeting + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above would work okay with our alarm clock, we could just add <code>this.name = this.alarmOwner</code> into the constructor.<br>The problem with this solution is that it ties the use of the method to the availability of a field. In other words, it<br>is an object oriented approach, since object are combinations of data and methods. This means that<br>you have to know to add a <code>this.name</code> whenever you want to use <code>greet()</code>. This is okay, until you start working with<br>an object that uses <code>this.name</code> for something else. For example let’s say you have a CoffeeMaker whose <code>this.name</code> is<br><code>Model XTR4302</code>. When the CoffeMaker greets you in the morning, it should do so with your name, and not its own model<br>name.</p>\n<p>The solution is to put a slight twist on the procedural implementation of <code>greet(name, greeting)</code>, we can break the<br>function into two chained functions. The first call of <code>greet</code> will take <code>name</code> as an argument, and it will return a<br>function that has <code>name</code> baked into it. This second generated - curried - function can now be called with <code>greeting</code>, and<br>it will always greet <code>name</code>.</p>\n<p>Specifically:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">        alert(greeting + <span class=\"string\">', '</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This method is powerful because it creates a customized function with the first call. This is the <code>chain of functions</code><br>that the wikipedia definition of currying refers to. Using currying to build a library of functions, allows the creation<br>of extremely flexible libraries.</p>\n<p>There’s no need to limit yourself to a single curry. With currying you can do things like setup default options, and<br>then pass in specific options to finally return a customized function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start building your custom function by calling it with the default options object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customStuff</span>(<span class=\"params\">defaultOptions</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Continue building your custom function by calling it with your specific options for this case</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        _.extend(config, defaultOptions, options);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// And now you have a customized function with access to the created options / config object, and it can</span></span><br><span class=\"line\">        <span class=\"comment\">// also be called with any number of arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// In here we have acces to the final config - a combination of the default and specific options</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (config.that &amp;&amp; config.other) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// do stuff with arg1 / arg2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above is an example of how to customize a function use a combination of default and actual options objects. It is<br>very flexible, and the concept of extending default options with the actual options is used in libraris from Grunt to<br>Backbone.</p>\n"},{"title":"The joys of toxic asset ownership","date":"2010-06-11T07:00:00.000Z","_content":"\nI tend to listen to a lot of podcasts while doing housework. Listening to things like\n<a href=\"http://www.npr.org/blogs/money/\">Planet Money</a> makes washing the dishes fun... well, maybe not, but it\nmakes it feel like I'm learning something new while doing the same old same old.<!--more-->\n\nNot too long ago, the members of Planet Money pitched in, pooled their money, and bought their own $1,000's worth of\nreal estate based toxic assets. You can hear about how\n<a href=\"http://www.npr.org/templates/story/story.php?storyId=124587240\">they picked their asset, bought it, and how\nit's doing</a>. You can also hear about the types of things that affect whether the Planet Money team will get a good\nreturn on their investment.... It turns out, that having people not pay their monthly mortgage is ok, since the person\nwho gave out the mortgage is then responsible for paying the money into the toxic asset coffers... whoever, if the home\nowners refinance, then the amount of money they have to pay decreases, and so the pay out to the toxic asset decreases.\nThere's also all sorts of other stories about the history of their specific toxic asset including\n<a href=\"http://www.npr.org/templates/story/story.php?storyId=124578382\">an eye opening animated graphic showing the\nrate that the loans in the asset are going into delinquency</a>. (I do have to say that one of the downfalls of the\ngraphic is that the number of loans in each state is not immediately apparent, even though these numbers vary from one\nto several thousand... so make sure you hover over the states you think are interesting to check the sample size).\n\nIt's a great series of stories, and it lets you understand about toxic assets, and even makes you feel bad for Toxy....\nYes, Toxy is the name of the toxic asset. But seriously, this is some reporting that takes a subject that is often\npresented as dead boring and overly complicated, and Planet Money makes the subject personal, interesting, and\nentertaining. Just wanted to share.\n","source":"_posts/the-joys-of-toxic-asset-ownership.md","raw":"---\ntitle: The joys of toxic asset ownership\ndate: 2010-06-11\ntags:\n- economics\n- planet money\n- real estate\n- toxic assets\n---\n\nI tend to listen to a lot of podcasts while doing housework. Listening to things like\n<a href=\"http://www.npr.org/blogs/money/\">Planet Money</a> makes washing the dishes fun... well, maybe not, but it\nmakes it feel like I'm learning something new while doing the same old same old.<!--more-->\n\nNot too long ago, the members of Planet Money pitched in, pooled their money, and bought their own $1,000's worth of\nreal estate based toxic assets. You can hear about how\n<a href=\"http://www.npr.org/templates/story/story.php?storyId=124587240\">they picked their asset, bought it, and how\nit's doing</a>. You can also hear about the types of things that affect whether the Planet Money team will get a good\nreturn on their investment.... It turns out, that having people not pay their monthly mortgage is ok, since the person\nwho gave out the mortgage is then responsible for paying the money into the toxic asset coffers... whoever, if the home\nowners refinance, then the amount of money they have to pay decreases, and so the pay out to the toxic asset decreases.\nThere's also all sorts of other stories about the history of their specific toxic asset including\n<a href=\"http://www.npr.org/templates/story/story.php?storyId=124578382\">an eye opening animated graphic showing the\nrate that the loans in the asset are going into delinquency</a>. (I do have to say that one of the downfalls of the\ngraphic is that the number of loans in each state is not immediately apparent, even though these numbers vary from one\nto several thousand... so make sure you hover over the states you think are interesting to check the sample size).\n\nIt's a great series of stories, and it lets you understand about toxic assets, and even makes you feel bad for Toxy....\nYes, Toxy is the name of the toxic asset. But seriously, this is some reporting that takes a subject that is often\npresented as dead boring and overly complicated, and Planet Money makes the subject personal, interesting, and\nentertaining. Just wanted to share.\n","slug":"the-joys-of-toxic-asset-ownership","published":1,"updated":"2018-12-25T05:50:51.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kve000fibyqkmiah27w","content":"<p>I tend to listen to a lot of podcasts while doing housework. Listening to things like<br><a href=\"http://www.npr.org/blogs/money/\" target=\"_blank\" rel=\"noopener\">Planet Money</a> makes washing the dishes fun… well, maybe not, but it<br>makes it feel like I’m learning something new while doing the same old same old.<a id=\"more\"></a></p>\n<p>Not too long ago, the members of Planet Money pitched in, pooled their money, and bought their own $1,000’s worth of<br>real estate based toxic assets. You can hear about how<br><a href=\"http://www.npr.org/templates/story/story.php?storyId=124587240\" target=\"_blank\" rel=\"noopener\">they picked their asset, bought it, and how<br>it’s doing</a>. You can also hear about the types of things that affect whether the Planet Money team will get a good<br>return on their investment…. It turns out, that having people not pay their monthly mortgage is ok, since the person<br>who gave out the mortgage is then responsible for paying the money into the toxic asset coffers… whoever, if the home<br>owners refinance, then the amount of money they have to pay decreases, and so the pay out to the toxic asset decreases.<br>There’s also all sorts of other stories about the history of their specific toxic asset including<br><a href=\"http://www.npr.org/templates/story/story.php?storyId=124578382\" target=\"_blank\" rel=\"noopener\">an eye opening animated graphic showing the<br>rate that the loans in the asset are going into delinquency</a>. (I do have to say that one of the downfalls of the<br>graphic is that the number of loans in each state is not immediately apparent, even though these numbers vary from one<br>to several thousand… so make sure you hover over the states you think are interesting to check the sample size).</p>\n<p>It’s a great series of stories, and it lets you understand about toxic assets, and even makes you feel bad for Toxy….<br>Yes, Toxy is the name of the toxic asset. But seriously, this is some reporting that takes a subject that is often<br>presented as dead boring and overly complicated, and Planet Money makes the subject personal, interesting, and<br>entertaining. Just wanted to share.</p>\n","site":{"data":{}},"excerpt":"<p>I tend to listen to a lot of podcasts while doing housework. Listening to things like<br><a href=\"http://www.npr.org/blogs/money/\" target=\"_blank\" rel=\"noopener\">Planet Money</a> makes washing the dishes fun… well, maybe not, but it<br>makes it feel like I’m learning something new while doing the same old same old.","more":"</p>\n<p>Not too long ago, the members of Planet Money pitched in, pooled their money, and bought their own $1,000’s worth of<br>real estate based toxic assets. You can hear about how<br><a href=\"http://www.npr.org/templates/story/story.php?storyId=124587240\" target=\"_blank\" rel=\"noopener\">they picked their asset, bought it, and how<br>it’s doing</a>. You can also hear about the types of things that affect whether the Planet Money team will get a good<br>return on their investment…. It turns out, that having people not pay their monthly mortgage is ok, since the person<br>who gave out the mortgage is then responsible for paying the money into the toxic asset coffers… whoever, if the home<br>owners refinance, then the amount of money they have to pay decreases, and so the pay out to the toxic asset decreases.<br>There’s also all sorts of other stories about the history of their specific toxic asset including<br><a href=\"http://www.npr.org/templates/story/story.php?storyId=124578382\" target=\"_blank\" rel=\"noopener\">an eye opening animated graphic showing the<br>rate that the loans in the asset are going into delinquency</a>. (I do have to say that one of the downfalls of the<br>graphic is that the number of loans in each state is not immediately apparent, even though these numbers vary from one<br>to several thousand… so make sure you hover over the states you think are interesting to check the sample size).</p>\n<p>It’s a great series of stories, and it lets you understand about toxic assets, and even makes you feel bad for Toxy….<br>Yes, Toxy is the name of the toxic asset. But seriously, this is some reporting that takes a subject that is often<br>presented as dead boring and overly complicated, and Planet Money makes the subject personal, interesting, and<br>entertaining. Just wanted to share.</p>"},{"title":"Try the same thing again... and again (sometimes)","date":"2013-12-05T08:00:00.000Z","_content":"Development can be different from other aspects of life. For example, most debugging is based on the principle of trying\nsomething once, observing the result, and reacting. Fast debugging often involves some modification of a binary search.\nThe binary search is based on the principle of trying things only once, and then moving on. Trying the same thing\nmultiple times is generally a waste of time in development. The way to efficient debugging, and efficient code is to\nonly touch something once. Iterate once, try once. The next time will be the same.\n\nI was watching a documentary. Wolves were hunting ducks in a knee deep puddle. There were adult ducks and baby ducks.\nAs a wolf approached, the adult duck would fly away and the baby duck would dive down into the muddy water and disappear.\nThe plight of the wolves looked hopeless. The ducks could see the wolves coming. As the wolf approached, the duck moved to\nsafety through the air or water. It looked comical. The wolves had no chance. The cute little wolf pups the adults were\nhunting to feed would starve, and the cute little ducklings would live and grow.\n\nAt this point if wolves were developers, they would have stopped. The wolf developers would have regrouped and thought\nabout how to implement camouflage, create better team coordination, train for speed, or maybe refactor their diets. It\nturned out the wolves were not developers, and they kept trying the exact same thing over and over again. A definition\nof insanity is doing the same thing and expecting different results. The wolves were not aware of\nthis. In a minute or so, one of the ducklings - maybe because it was young and inexperienced or tired - ended up in the\nwrong place at the wrong time. With its strong jaws, the wolf plucked the duckling from the water. The duckling died\nand the wolf pups lived.\n\n","source":"_posts/try-the-same-thing-again-and-again-sometimes.md","raw":"---\ntitle: Try the same thing again... and again (sometimes)\ndate: 2013-12-05\ntags:\n- development\n- life\n---\nDevelopment can be different from other aspects of life. For example, most debugging is based on the principle of trying\nsomething once, observing the result, and reacting. Fast debugging often involves some modification of a binary search.\nThe binary search is based on the principle of trying things only once, and then moving on. Trying the same thing\nmultiple times is generally a waste of time in development. The way to efficient debugging, and efficient code is to\nonly touch something once. Iterate once, try once. The next time will be the same.\n\nI was watching a documentary. Wolves were hunting ducks in a knee deep puddle. There were adult ducks and baby ducks.\nAs a wolf approached, the adult duck would fly away and the baby duck would dive down into the muddy water and disappear.\nThe plight of the wolves looked hopeless. The ducks could see the wolves coming. As the wolf approached, the duck moved to\nsafety through the air or water. It looked comical. The wolves had no chance. The cute little wolf pups the adults were\nhunting to feed would starve, and the cute little ducklings would live and grow.\n\nAt this point if wolves were developers, they would have stopped. The wolf developers would have regrouped and thought\nabout how to implement camouflage, create better team coordination, train for speed, or maybe refactor their diets. It\nturned out the wolves were not developers, and they kept trying the exact same thing over and over again. A definition\nof insanity is doing the same thing and expecting different results. The wolves were not aware of\nthis. In a minute or so, one of the ducklings - maybe because it was young and inexperienced or tired - ended up in the\nwrong place at the wrong time. With its strong jaws, the wolf plucked the duckling from the water. The duckling died\nand the wolf pups lived.\n\n","slug":"try-the-same-thing-again-and-again-sometimes","published":1,"updated":"2018-12-25T06:13:52.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3g0kvf000hibyq9g2wuw6l","content":"<p>Development can be different from other aspects of life. For example, most debugging is based on the principle of trying<br>something once, observing the result, and reacting. Fast debugging often involves some modification of a binary search.<br>The binary search is based on the principle of trying things only once, and then moving on. Trying the same thing<br>multiple times is generally a waste of time in development. The way to efficient debugging, and efficient code is to<br>only touch something once. Iterate once, try once. The next time will be the same.</p>\n<p>I was watching a documentary. Wolves were hunting ducks in a knee deep puddle. There were adult ducks and baby ducks.<br>As a wolf approached, the adult duck would fly away and the baby duck would dive down into the muddy water and disappear.<br>The plight of the wolves looked hopeless. The ducks could see the wolves coming. As the wolf approached, the duck moved to<br>safety through the air or water. It looked comical. The wolves had no chance. The cute little wolf pups the adults were<br>hunting to feed would starve, and the cute little ducklings would live and grow.</p>\n<p>At this point if wolves were developers, they would have stopped. The wolf developers would have regrouped and thought<br>about how to implement camouflage, create better team coordination, train for speed, or maybe refactor their diets. It<br>turned out the wolves were not developers, and they kept trying the exact same thing over and over again. A definition<br>of insanity is doing the same thing and expecting different results. The wolves were not aware of<br>this. In a minute or so, one of the ducklings - maybe because it was young and inexperienced or tired - ended up in the<br>wrong place at the wrong time. With its strong jaws, the wolf plucked the duckling from the water. The duckling died<br>and the wolf pups lived.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Development can be different from other aspects of life. For example, most debugging is based on the principle of trying<br>something once, observing the result, and reacting. Fast debugging often involves some modification of a binary search.<br>The binary search is based on the principle of trying things only once, and then moving on. Trying the same thing<br>multiple times is generally a waste of time in development. The way to efficient debugging, and efficient code is to<br>only touch something once. Iterate once, try once. The next time will be the same.</p>\n<p>I was watching a documentary. Wolves were hunting ducks in a knee deep puddle. There were adult ducks and baby ducks.<br>As a wolf approached, the adult duck would fly away and the baby duck would dive down into the muddy water and disappear.<br>The plight of the wolves looked hopeless. The ducks could see the wolves coming. As the wolf approached, the duck moved to<br>safety through the air or water. It looked comical. The wolves had no chance. The cute little wolf pups the adults were<br>hunting to feed would starve, and the cute little ducklings would live and grow.</p>\n<p>At this point if wolves were developers, they would have stopped. The wolf developers would have regrouped and thought<br>about how to implement camouflage, create better team coordination, train for speed, or maybe refactor their diets. It<br>turned out the wolves were not developers, and they kept trying the exact same thing over and over again. A definition<br>of insanity is doing the same thing and expecting different results. The wolves were not aware of<br>this. In a minute or so, one of the ducklings - maybe because it was young and inexperienced or tired - ended up in the<br>wrong place at the wrong time. With its strong jaws, the wolf plucked the duckling from the water. The duckling died<br>and the wolf pups lived.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjq3g0kuy0000ibyqpf9k7n1o","tag_id":"cjq3g0kv50004ibyqtg1su1om","_id":"cjq3g0kve000gibyqygeucmo0"},{"post_id":"cjq3g0kuy0000ibyqpf9k7n1o","tag_id":"cjq3g0kv80008ibyqpmsmnpsb","_id":"cjq3g0kvf000iibyqlzlhetxg"},{"post_id":"cjq3g0kuy0000ibyqpf9k7n1o","tag_id":"cjq3g0kva000bibyqaftvy2ok","_id":"cjq3g0kvg000kibyqjuii5bzw"},{"post_id":"cjq3g0kv30002ibyquy5c5jfl","tag_id":"cjq3g0kvd000eibyq6tm8ujtc","_id":"cjq3g0kvg000libyq12g5tq9g"},{"post_id":"cjq3g0kv60005ibyqx0fkf3ho","tag_id":"cjq3g0kvf000jibyqh7zklt2e","_id":"cjq3g0kvg000oibyqg3bg402s"},{"post_id":"cjq3g0kv60005ibyqx0fkf3ho","tag_id":"cjq3g0kvg000mibyqrnrwffha","_id":"cjq3g0kvh000pibyqy7apwd3q"},{"post_id":"cjq3g0kv70006ibyqszt6xuma","tag_id":"cjq3g0kvg000nibyqg2kmdtfv","_id":"cjq3g0kvi000sibyqezg23xtg"},{"post_id":"cjq3g0kv70006ibyqszt6xuma","tag_id":"cjq3g0kvh000qibyqi3lgxbvh","_id":"cjq3g0kvi000tibyq50b3wqgy"},{"post_id":"cjq3g0kv80007ibyql836y3il","tag_id":"cjq3g0kvf000jibyqh7zklt2e","_id":"cjq3g0kvj000wibyqf7mgm9q2"},{"post_id":"cjq3g0kv80007ibyql836y3il","tag_id":"cjq3g0kvg000mibyqrnrwffha","_id":"cjq3g0kvj000xibyqyhr7yi0n"},{"post_id":"cjq3g0kv90009ibyqm16dgci0","tag_id":"cjq3g0kvj000vibyqb5ob0ep6","_id":"cjq3g0kvk0010ibyq1i8790ys"},{"post_id":"cjq3g0kv90009ibyqm16dgci0","tag_id":"cjq3g0kvj000yibyqr0im13ym","_id":"cjq3g0kvk0011ibyqp4aefnmc"},{"post_id":"cjq3g0kva000aibyqipq2iv7x","tag_id":"cjq3g0kvg000nibyqg2kmdtfv","_id":"cjq3g0kvl0014ibyqh45hc5t9"},{"post_id":"cjq3g0kva000aibyqipq2iv7x","tag_id":"cjq3g0kvk0012ibyqzo5iqsxx","_id":"cjq3g0kvl0015ibyqn7xexyah"},{"post_id":"cjq3g0kvb000cibyq2u4h53qh","tag_id":"cjq3g0kvg000nibyqg2kmdtfv","_id":"cjq3g0kvm001bibyq5djhjyhi"},{"post_id":"cjq3g0kvb000cibyq2u4h53qh","tag_id":"cjq3g0kvl0016ibyq6jw297hp","_id":"cjq3g0kvm001cibyqgcw588c1"},{"post_id":"cjq3g0kvb000cibyq2u4h53qh","tag_id":"cjq3g0kvl0017ibyq33rxkmyp","_id":"cjq3g0kvm001eibyqbrdpq4ab"},{"post_id":"cjq3g0kvb000cibyq2u4h53qh","tag_id":"cjq3g0kvl0018ibyq182h7rxc","_id":"cjq3g0kvm001fibyqrc4drx19"},{"post_id":"cjq3g0kvb000cibyq2u4h53qh","tag_id":"cjq3g0kvl0019ibyqk3ns25bu","_id":"cjq3g0kvn001hibyqcz85dnjo"},{"post_id":"cjq3g0kvc000dibyqe0tdc5t4","tag_id":"cjq3g0kvg000nibyqg2kmdtfv","_id":"cjq3g0kvn001jibyqcu5myk7u"},{"post_id":"cjq3g0kvc000dibyqe0tdc5t4","tag_id":"cjq3g0kvl0016ibyq6jw297hp","_id":"cjq3g0kvn001kibyqt4ee4qcb"},{"post_id":"cjq3g0kvc000dibyqe0tdc5t4","tag_id":"cjq3g0kvl0017ibyq33rxkmyp","_id":"cjq3g0kvn001mibyqrc4cmopn"},{"post_id":"cjq3g0kve000fibyqkmiah27w","tag_id":"cjq3g0kvn001iibyqaehg5x8q","_id":"cjq3g0kvo001qibyq7zq2ci49"},{"post_id":"cjq3g0kve000fibyqkmiah27w","tag_id":"cjq3g0kvn001libyqh180hsfc","_id":"cjq3g0kvo001ribyqla1805ks"},{"post_id":"cjq3g0kve000fibyqkmiah27w","tag_id":"cjq3g0kvo001nibyqpy8w18uo","_id":"cjq3g0kvo001tibyqh0mcvr26"},{"post_id":"cjq3g0kve000fibyqkmiah27w","tag_id":"cjq3g0kvo001oibyqgrieuv88","_id":"cjq3g0kvp001uibyqegjtgbs8"},{"post_id":"cjq3g0kvf000hibyq9g2wuw6l","tag_id":"cjq3g0kvo001pibyqxm655kcn","_id":"cjq3g0kvp001vibyqql8rwc6x"},{"post_id":"cjq3g0kvf000hibyq9g2wuw6l","tag_id":"cjq3g0kvo001sibyq4en0ipoj","_id":"cjq3g0kvp001wibyqvwdh7l2u"}],"Tag":[{"name":"automation","_id":"cjq3g0kv50004ibyqtg1su1om"},{"name":"node","_id":"cjq3g0kv80008ibyqpmsmnpsb"},{"name":"grunt","_id":"cjq3g0kva000bibyqaftvy2ok"},{"name":"debugging","_id":"cjq3g0kvd000eibyq6tm8ujtc"},{"name":"logic","_id":"cjq3g0kvf000jibyqh7zklt2e"},{"name":"style","_id":"cjq3g0kvg000mibyqrnrwffha"},{"name":"javascript","_id":"cjq3g0kvg000nibyqg2kmdtfv"},{"name":"caching","_id":"cjq3g0kvh000qibyqi3lgxbvh"},{"name":"work","_id":"cjq3g0kvj000vibyqb5ob0ep6"},{"name":"effort","_id":"cjq3g0kvj000yibyqr0im13ym"},{"name":"quizzes","_id":"cjq3g0kvk0012ibyqzo5iqsxx"},{"name":"currying","_id":"cjq3g0kvl0016ibyq6jw297hp"},{"name":"lambdas","_id":"cjq3g0kvl0017ibyq33rxkmyp"},{"name":"function calls","_id":"cjq3g0kvl0018ibyq182h7rxc"},{"name":"function references","_id":"cjq3g0kvl0019ibyqk3ns25bu"},{"name":"economics","_id":"cjq3g0kvn001iibyqaehg5x8q"},{"name":"planet money","_id":"cjq3g0kvn001libyqh180hsfc"},{"name":"real estate","_id":"cjq3g0kvo001nibyqpy8w18uo"},{"name":"toxic assets","_id":"cjq3g0kvo001oibyqgrieuv88"},{"name":"development","_id":"cjq3g0kvo001pibyqxm655kcn"},{"name":"life","_id":"cjq3g0kvo001sibyq4en0ipoj"}]}}